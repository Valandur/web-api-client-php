<?php
/**
 * ItemStack
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ItemStack Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemStack implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemStack';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quantity' => 'int',
        'type' => '\Swagger\Client\Model\CatalogType',
        'absorption' => 'double',
        'age' => '\Swagger\Client\Model\AgeableData',
        'aggressive' => 'bool',
        'ai_enabled' => 'bool',
        'anger_level' => 'int',
        'armor_stand' => '\Swagger\Client\Model\ArmorStandData',
        'art' => '\Swagger\Client\Model\CatalogType',
        'attached' => 'bool',
        'author' => 'string',
        'axis' => 'string',
        'banner' => '\Swagger\Client\Model\BannerData',
        'beacon' => '\Swagger\Client\Model\BeaconData',
        'big_mushroom' => '\Swagger\Client\Model\CatalogType',
        'block' => '\Swagger\Client\Model\BlockState',
        'breathing' => '\Swagger\Client\Model\BreathingData',
        'breedable' => 'bool',
        'brewing_stand' => '\Swagger\Client\Model\BrewingStandData',
        'brick' => '\Swagger\Client\Model\CatalogType',
        'career' => '\Swagger\Client\Model\Career',
        'charged' => 'bool',
        'coal' => '\Swagger\Client\Model\CatalogType',
        'color' => '\Swagger\Client\Model\Color',
        'command' => '\Swagger\Client\Model\CommandData',
        'comparator' => '\Swagger\Client\Model\CatalogType',
        'connected_direction' => 'string[]',
        'cooked_fish' => '\Swagger\Client\Model\CatalogType',
        'cooldown' => 'int',
        'critical_hit' => 'bool',
        'custom_name' => 'bool',
        'damage' => 'double',
        'damageable' => '\Swagger\Client\Model\DamageableData',
        'decayable' => 'bool',
        'delay' => 'int',
        'despawn_delay' => '\Swagger\Client\Model\DespawnDelayData',
        'direction' => 'string',
        'dirt' => '\Swagger\Client\Model\CatalogType',
        'disarmed' => 'bool',
        'disguised_block' => '\Swagger\Client\Model\CatalogType',
        'display_name' => 'string',
        'dominant_hand' => '\Swagger\Client\Model\CatalogType',
        'double_plant' => '\Swagger\Client\Model\CatalogType',
        'drops' => 'bool',
        'durability' => '\Swagger\Client\Model\DurabilityData',
        'dye' => '\Swagger\Client\Model\DyeColor',
        'enchantments' => '\Swagger\Client\Model\Enchantment[]',
        'end_gateway' => '\Swagger\Client\Model\EndGatewayData',
        'exp_orb' => 'int',
        'experience' => '\Swagger\Client\Model\ExperienceHolderData',
        'expire_ticks' => 'int',
        'explosion_radius' => 'int',
        'extended' => 'bool',
        'fall_distance' => 'float',
        'falling_block' => '\Swagger\Client\Model\FallingBlockData',
        'filled' => 'bool',
        'firework_effects' => '\Swagger\Client\Model\FireworkEffect[]',
        'firework_rocket' => '\Swagger\Client\Model\FireworkRocketData',
        'fish' => '\Swagger\Client\Model\CatalogType',
        'flammable' => 'bool',
        'fluid' => '\Swagger\Client\Model\FluidStack',
        'fluid_level' => 'int',
        'fluid_tanks' => 'map[string,\Swagger\Client\Model\FluidStack[]]',
        'flying' => 'bool',
        'flying_ability' => 'bool',
        'food' => '\Swagger\Client\Model\FoodData',
        'furnace' => '\Swagger\Client\Model\FurnaceData',
        'fuse' => '\Swagger\Client\Model\FuseData',
        'game_mode' => '\Swagger\Client\Model\GameMode',
        'generation' => 'int',
        'glowing' => 'bool',
        'golden_apple' => '\Swagger\Client\Model\CatalogType',
        'griefs' => 'bool',
        'growth' => '\Swagger\Client\Model\GrowthData',
        'health' => '\Swagger\Client\Model\HealthData',
        'hide' => '\Swagger\Client\Model\HideData',
        'hinge' => '\Swagger\Client\Model\CatalogType',
        'horse' => '\Swagger\Client\Model\HorseData',
        'igniteable' => '\Swagger\Client\Model\IgniteableData',
        'in_wall' => 'bool',
        'inventory' => '\Swagger\Client\Model\Inventory',
        'invisibility' => '\Swagger\Client\Model\InvisibilityData',
        'invulnerability' => '\Swagger\Client\Model\InvulnerabilityData',
        'joined' => '\Swagger\Client\Model\JoinData',
        'knockback' => 'int',
        'layer' => 'int',
        'leash' => '\Swagger\Client\Model\LeashData',
        'lock_token' => 'string',
        'log_axis' => '\Swagger\Client\Model\CatalogType',
        'lore' => 'string[]',
        'minecart_block' => '\Swagger\Client\Model\MinecartBlockData',
        'mob_spawner' => '\Swagger\Client\Model\MobSpawnerData',
        'moisture' => 'int',
        'note' => '\Swagger\Client\Model\CatalogType',
        'occupied' => 'bool',
        'ocelot' => '\Swagger\Client\Model\CatalogType',
        'open' => 'bool',
        'pages' => 'string[]',
        'passengers' => 'string[]',
        'persists' => 'bool',
        'pickup_delay' => '\Swagger\Client\Model\PickupDelayData',
        'pickup_rule' => '\Swagger\Client\Model\CatalogType',
        'pig_saddle' => 'bool',
        'piston' => '\Swagger\Client\Model\CatalogType',
        'placeable_on' => '\Swagger\Client\Model\CatalogType[]',
        'plant' => '\Swagger\Client\Model\CatalogType',
        'player_created' => 'bool',
        'playing' => 'bool',
        'portion' => '\Swagger\Client\Model\CatalogType',
        'potion_effects' => '\Swagger\Client\Model\PotionEffect[]',
        'powered' => 'bool',
        'prismarine' => '\Swagger\Client\Model\CatalogType',
        'quartz' => '\Swagger\Client\Model\CatalogType',
        'rabbit' => '\Swagger\Client\Model\CatalogType',
        'rail_direction' => '\Swagger\Client\Model\CatalogType',
        'redstone_power' => 'int',
        'represented_item' => '\Swagger\Client\Model\ItemStack',
        'represented_player' => 'string',
        'respawn_locations' => 'map[string,\Swagger\Client\Model\Location]',
        'sand' => '\Swagger\Client\Model\CatalogType',
        'sand_stone' => '\Swagger\Client\Model\CatalogType',
        'screaming' => 'bool',
        'seamless' => 'bool',
        'shatters' => 'bool',
        'sheared' => 'bool',
        'shrub' => '\Swagger\Client\Model\CatalogType',
        'sign' => 'string[]',
        'silent' => 'bool',
        'sitting' => 'bool',
        'skin' => 'string',
        'skull' => '\Swagger\Client\Model\CatalogType',
        'slab' => '\Swagger\Client\Model\CatalogType',
        'sleeping' => 'bool',
        'slime' => '\Swagger\Client\Model\SlimeData',
        'sneaking' => 'bool',
        'snow' => 'bool',
        'spawn' => '\Swagger\Client\Model\CatalogType',
        'sprinting' => 'bool',
        'stair_shape' => '\Swagger\Client\Model\CatalogType',
        'statistics' => '\Swagger\Client\Model\Stat[]',
        'stone' => '\Swagger\Client\Model\CatalogType',
        'stored_enchantments' => '\Swagger\Client\Model\Enchantment[]',
        'structure' => '\Swagger\Client\Model\StructureData',
        'stuck_arrows' => 'int',
        'tamed' => '\Swagger\Client\Model\TameableData',
        'target' => '\Swagger\Client\Model\Vector3d',
        'trades' => '\Swagger\Client\Model\TradeOffer[]',
        'tree' => '\Swagger\Client\Model\CatalogType',
        'vehicle' => '\Swagger\Client\Model\VehicleData',
        'wall' => '\Swagger\Client\Model\CatalogType',
        'wet' => 'bool',
        'wires' => '\Swagger\Client\Model\WireAttachmentData',
        'accepts_items' => '\Swagger\Client\Model\AcceptsItems',
        'applicable_effect' => '\Swagger\Client\Model\PotionEffect[]',
        'armor_slot_type' => '\Swagger\Client\Model\ArmorSlotType',
        'armor_type' => '\Swagger\Client\Model\CatalogType',
        'blast_resistance' => 'double',
        'burning_fuel' => 'int',
        'damage_absorption' => 'int',
        'efficiency' => 'double',
        'equipment_type' => '\Swagger\Client\Model\CatalogType',
        'equiptment_slot_type' => '\Swagger\Client\Model\EquipmentSlotType',
        'eye_height' => 'double',
        'eye_location' => '\Swagger\Client\Model\Vector3d',
        'fluid_temperature' => 'int',
        'fluid_viscosity' => 'int',
        'food_restoration' => 'int',
        'full_block_selection_box' => 'bool',
        'gravity_affected' => 'bool',
        'ground_luminance' => 'double',
        'gui_id' => '\Swagger\Client\Model\GuiIdProperty',
        'hardness' => 'double',
        'held_item' => '\Swagger\Client\Model\CatalogType',
        'identifiable' => '\Swagger\Client\Model\Identifiable',
        'indirectly_powered' => 'bool',
        'instrument' => '\Swagger\Client\Model\CatalogType',
        'inventory_capacity' => '\Swagger\Client\Model\InventoryCapacity',
        'inventory_dimension' => '\Swagger\Client\Model\InventoryDimension',
        'inventory_title' => '\Swagger\Client\Model\InventoryTitle',
        'light_emission' => 'int',
        'matter' => 'string',
        'passable' => 'bool',
        'record' => '\Swagger\Client\Model\CatalogType',
        'replaceable' => 'bool',
        'saturation_property' => 'double',
        'sky_luminance' => 'double',
        'slot_index' => '\Swagger\Client\Model\SlotIndex',
        'slot_pos' => '\Swagger\Client\Model\SlotPos',
        'slot_side' => '\Swagger\Client\Model\SlotSide',
        'smeltable' => 'bool',
        'solid_cube' => 'bool',
        'statistics_tracked' => 'bool',
        'surrogate_block' => 'bool',
        'temperature' => 'double',
        'tool_type' => '\Swagger\Client\Model\CatalogType',
        'unbreakable' => 'bool',
        'use_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quantity' => 'int32',
        'type' => null,
        'absorption' => 'double',
        'age' => null,
        'aggressive' => null,
        'ai_enabled' => null,
        'anger_level' => 'int32',
        'armor_stand' => null,
        'art' => null,
        'attached' => null,
        'author' => null,
        'axis' => null,
        'banner' => null,
        'beacon' => null,
        'big_mushroom' => null,
        'block' => null,
        'breathing' => null,
        'breedable' => null,
        'brewing_stand' => null,
        'brick' => null,
        'career' => null,
        'charged' => null,
        'coal' => null,
        'color' => null,
        'command' => null,
        'comparator' => null,
        'connected_direction' => null,
        'cooked_fish' => null,
        'cooldown' => 'int32',
        'critical_hit' => null,
        'custom_name' => null,
        'damage' => 'double',
        'damageable' => null,
        'decayable' => null,
        'delay' => 'int32',
        'despawn_delay' => null,
        'direction' => null,
        'dirt' => null,
        'disarmed' => null,
        'disguised_block' => null,
        'display_name' => null,
        'dominant_hand' => null,
        'double_plant' => null,
        'drops' => null,
        'durability' => null,
        'dye' => null,
        'enchantments' => null,
        'end_gateway' => null,
        'exp_orb' => 'int32',
        'experience' => null,
        'expire_ticks' => 'int32',
        'explosion_radius' => 'int32',
        'extended' => null,
        'fall_distance' => 'float',
        'falling_block' => null,
        'filled' => null,
        'firework_effects' => null,
        'firework_rocket' => null,
        'fish' => null,
        'flammable' => null,
        'fluid' => null,
        'fluid_level' => 'int32',
        'fluid_tanks' => null,
        'flying' => null,
        'flying_ability' => null,
        'food' => null,
        'furnace' => null,
        'fuse' => null,
        'game_mode' => null,
        'generation' => 'int32',
        'glowing' => null,
        'golden_apple' => null,
        'griefs' => null,
        'growth' => null,
        'health' => null,
        'hide' => null,
        'hinge' => null,
        'horse' => null,
        'igniteable' => null,
        'in_wall' => null,
        'inventory' => null,
        'invisibility' => null,
        'invulnerability' => null,
        'joined' => null,
        'knockback' => 'int32',
        'layer' => 'int32',
        'leash' => null,
        'lock_token' => null,
        'log_axis' => null,
        'lore' => null,
        'minecart_block' => null,
        'mob_spawner' => null,
        'moisture' => 'int32',
        'note' => null,
        'occupied' => null,
        'ocelot' => null,
        'open' => null,
        'pages' => null,
        'passengers' => 'uuid',
        'persists' => null,
        'pickup_delay' => null,
        'pickup_rule' => null,
        'pig_saddle' => null,
        'piston' => null,
        'placeable_on' => null,
        'plant' => null,
        'player_created' => null,
        'playing' => null,
        'portion' => null,
        'potion_effects' => null,
        'powered' => null,
        'prismarine' => null,
        'quartz' => null,
        'rabbit' => null,
        'rail_direction' => null,
        'redstone_power' => 'int32',
        'represented_item' => null,
        'represented_player' => null,
        'respawn_locations' => null,
        'sand' => null,
        'sand_stone' => null,
        'screaming' => null,
        'seamless' => null,
        'shatters' => null,
        'sheared' => null,
        'shrub' => null,
        'sign' => null,
        'silent' => null,
        'sitting' => null,
        'skin' => 'uuid',
        'skull' => null,
        'slab' => null,
        'sleeping' => null,
        'slime' => null,
        'sneaking' => null,
        'snow' => null,
        'spawn' => null,
        'sprinting' => null,
        'stair_shape' => null,
        'statistics' => null,
        'stone' => null,
        'stored_enchantments' => null,
        'structure' => null,
        'stuck_arrows' => 'int32',
        'tamed' => null,
        'target' => null,
        'trades' => null,
        'tree' => null,
        'vehicle' => null,
        'wall' => null,
        'wet' => null,
        'wires' => null,
        'accepts_items' => null,
        'applicable_effect' => null,
        'armor_slot_type' => null,
        'armor_type' => null,
        'blast_resistance' => 'double',
        'burning_fuel' => 'int32',
        'damage_absorption' => 'int32',
        'efficiency' => 'double',
        'equipment_type' => null,
        'equiptment_slot_type' => null,
        'eye_height' => 'double',
        'eye_location' => null,
        'fluid_temperature' => 'int32',
        'fluid_viscosity' => 'int32',
        'food_restoration' => 'int32',
        'full_block_selection_box' => null,
        'gravity_affected' => null,
        'ground_luminance' => 'double',
        'gui_id' => null,
        'hardness' => 'double',
        'held_item' => null,
        'identifiable' => null,
        'indirectly_powered' => null,
        'instrument' => null,
        'inventory_capacity' => null,
        'inventory_dimension' => null,
        'inventory_title' => null,
        'light_emission' => 'int32',
        'matter' => null,
        'passable' => null,
        'record' => null,
        'replaceable' => null,
        'saturation_property' => 'double',
        'sky_luminance' => 'double',
        'slot_index' => null,
        'slot_pos' => null,
        'slot_side' => null,
        'smeltable' => null,
        'solid_cube' => null,
        'statistics_tracked' => null,
        'surrogate_block' => null,
        'temperature' => 'double',
        'tool_type' => null,
        'unbreakable' => null,
        'use_limit' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quantity' => 'quantity',
        'type' => 'type',
        'absorption' => 'absorption',
        'age' => 'age',
        'aggressive' => 'aggressive',
        'ai_enabled' => 'aiEnabled',
        'anger_level' => 'angerLevel',
        'armor_stand' => 'armorStand',
        'art' => 'art',
        'attached' => 'attached',
        'author' => 'author',
        'axis' => 'axis',
        'banner' => 'banner',
        'beacon' => 'beacon',
        'big_mushroom' => 'bigMushroom',
        'block' => 'block',
        'breathing' => 'breathing',
        'breedable' => 'breedable',
        'brewing_stand' => 'brewingStand',
        'brick' => 'brick',
        'career' => 'career',
        'charged' => 'charged',
        'coal' => 'coal',
        'color' => 'color',
        'command' => 'command',
        'comparator' => 'comparator',
        'connected_direction' => 'connectedDirection',
        'cooked_fish' => 'cookedFish',
        'cooldown' => 'cooldown',
        'critical_hit' => 'criticalHit',
        'custom_name' => 'customName',
        'damage' => 'damage',
        'damageable' => 'damageable',
        'decayable' => 'decayable',
        'delay' => 'delay',
        'despawn_delay' => 'despawnDelay',
        'direction' => 'direction',
        'dirt' => 'dirt',
        'disarmed' => 'disarmed',
        'disguised_block' => 'disguisedBlock',
        'display_name' => 'displayName',
        'dominant_hand' => 'dominantHand',
        'double_plant' => 'doublePlant',
        'drops' => 'drops',
        'durability' => 'durability',
        'dye' => 'dye',
        'enchantments' => 'enchantments',
        'end_gateway' => 'endGateway',
        'exp_orb' => 'expOrb',
        'experience' => 'experience',
        'expire_ticks' => 'expireTicks',
        'explosion_radius' => 'explosionRadius',
        'extended' => 'extended',
        'fall_distance' => 'fallDistance',
        'falling_block' => 'fallingBlock',
        'filled' => 'filled',
        'firework_effects' => 'fireworkEffects',
        'firework_rocket' => 'fireworkRocket',
        'fish' => 'fish',
        'flammable' => 'flammable',
        'fluid' => 'fluid',
        'fluid_level' => 'fluidLevel',
        'fluid_tanks' => 'fluidTanks',
        'flying' => 'flying',
        'flying_ability' => 'flyingAbility',
        'food' => 'food',
        'furnace' => 'furnace',
        'fuse' => 'fuse',
        'game_mode' => 'gameMode',
        'generation' => 'generation',
        'glowing' => 'glowing',
        'golden_apple' => 'goldenApple',
        'griefs' => 'griefs',
        'growth' => 'growth',
        'health' => 'health',
        'hide' => 'hide',
        'hinge' => 'hinge',
        'horse' => 'horse',
        'igniteable' => 'igniteable',
        'in_wall' => 'inWall',
        'inventory' => 'inventory',
        'invisibility' => 'invisibility',
        'invulnerability' => 'invulnerability',
        'joined' => 'joined',
        'knockback' => 'knockback',
        'layer' => 'layer',
        'leash' => 'leash',
        'lock_token' => 'lockToken',
        'log_axis' => 'logAxis',
        'lore' => 'lore',
        'minecart_block' => 'minecartBlock',
        'mob_spawner' => 'mobSpawner',
        'moisture' => 'moisture',
        'note' => 'note',
        'occupied' => 'occupied',
        'ocelot' => 'ocelot',
        'open' => 'open',
        'pages' => 'pages',
        'passengers' => 'passengers',
        'persists' => 'persists',
        'pickup_delay' => 'pickupDelay',
        'pickup_rule' => 'pickupRule',
        'pig_saddle' => 'pigSaddle',
        'piston' => 'piston',
        'placeable_on' => 'placeableOn',
        'plant' => 'plant',
        'player_created' => 'playerCreated',
        'playing' => 'playing',
        'portion' => 'portion',
        'potion_effects' => 'potionEffects',
        'powered' => 'powered',
        'prismarine' => 'prismarine',
        'quartz' => 'quartz',
        'rabbit' => 'rabbit',
        'rail_direction' => 'railDirection',
        'redstone_power' => 'redstonePower',
        'represented_item' => 'representedItem',
        'represented_player' => 'representedPlayer',
        'respawn_locations' => 'respawnLocations',
        'sand' => 'sand',
        'sand_stone' => 'sandStone',
        'screaming' => 'screaming',
        'seamless' => 'seamless',
        'shatters' => 'shatters',
        'sheared' => 'sheared',
        'shrub' => 'shrub',
        'sign' => 'sign',
        'silent' => 'silent',
        'sitting' => 'sitting',
        'skin' => 'skin',
        'skull' => 'skull',
        'slab' => 'slab',
        'sleeping' => 'sleeping',
        'slime' => 'slime',
        'sneaking' => 'sneaking',
        'snow' => 'snow',
        'spawn' => 'spawn',
        'sprinting' => 'sprinting',
        'stair_shape' => 'stairShape',
        'statistics' => 'statistics',
        'stone' => 'stone',
        'stored_enchantments' => 'storedEnchantments',
        'structure' => 'structure',
        'stuck_arrows' => 'stuckArrows',
        'tamed' => 'tamed',
        'target' => 'target',
        'trades' => 'trades',
        'tree' => 'tree',
        'vehicle' => 'vehicle',
        'wall' => 'wall',
        'wet' => 'wet',
        'wires' => 'wires',
        'accepts_items' => 'acceptsItems',
        'applicable_effect' => 'applicableEffect',
        'armor_slot_type' => 'armorSlotType',
        'armor_type' => 'armorType',
        'blast_resistance' => 'blastResistance',
        'burning_fuel' => 'burningFuel',
        'damage_absorption' => 'damageAbsorption',
        'efficiency' => 'efficiency',
        'equipment_type' => 'equipmentType',
        'equiptment_slot_type' => 'equiptmentSlotType',
        'eye_height' => 'eyeHeight',
        'eye_location' => 'eyeLocation',
        'fluid_temperature' => 'fluidTemperature',
        'fluid_viscosity' => 'fluidViscosity',
        'food_restoration' => 'foodRestoration',
        'full_block_selection_box' => 'fullBlockSelectionBox',
        'gravity_affected' => 'gravityAffected',
        'ground_luminance' => 'groundLuminance',
        'gui_id' => 'guiId',
        'hardness' => 'hardness',
        'held_item' => 'heldItem',
        'identifiable' => 'identifiable',
        'indirectly_powered' => 'indirectlyPowered',
        'instrument' => 'instrument',
        'inventory_capacity' => 'inventoryCapacity',
        'inventory_dimension' => 'inventoryDimension',
        'inventory_title' => 'inventoryTitle',
        'light_emission' => 'lightEmission',
        'matter' => 'matter',
        'passable' => 'passable',
        'record' => 'record',
        'replaceable' => 'replaceable',
        'saturation_property' => 'saturationProperty',
        'sky_luminance' => 'skyLuminance',
        'slot_index' => 'slotIndex',
        'slot_pos' => 'slotPos',
        'slot_side' => 'slotSide',
        'smeltable' => 'smeltable',
        'solid_cube' => 'solidCube',
        'statistics_tracked' => 'statisticsTracked',
        'surrogate_block' => 'surrogateBlock',
        'temperature' => 'temperature',
        'tool_type' => 'toolType',
        'unbreakable' => 'unbreakable',
        'use_limit' => 'useLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quantity' => 'setQuantity',
        'type' => 'setType',
        'absorption' => 'setAbsorption',
        'age' => 'setAge',
        'aggressive' => 'setAggressive',
        'ai_enabled' => 'setAiEnabled',
        'anger_level' => 'setAngerLevel',
        'armor_stand' => 'setArmorStand',
        'art' => 'setArt',
        'attached' => 'setAttached',
        'author' => 'setAuthor',
        'axis' => 'setAxis',
        'banner' => 'setBanner',
        'beacon' => 'setBeacon',
        'big_mushroom' => 'setBigMushroom',
        'block' => 'setBlock',
        'breathing' => 'setBreathing',
        'breedable' => 'setBreedable',
        'brewing_stand' => 'setBrewingStand',
        'brick' => 'setBrick',
        'career' => 'setCareer',
        'charged' => 'setCharged',
        'coal' => 'setCoal',
        'color' => 'setColor',
        'command' => 'setCommand',
        'comparator' => 'setComparator',
        'connected_direction' => 'setConnectedDirection',
        'cooked_fish' => 'setCookedFish',
        'cooldown' => 'setCooldown',
        'critical_hit' => 'setCriticalHit',
        'custom_name' => 'setCustomName',
        'damage' => 'setDamage',
        'damageable' => 'setDamageable',
        'decayable' => 'setDecayable',
        'delay' => 'setDelay',
        'despawn_delay' => 'setDespawnDelay',
        'direction' => 'setDirection',
        'dirt' => 'setDirt',
        'disarmed' => 'setDisarmed',
        'disguised_block' => 'setDisguisedBlock',
        'display_name' => 'setDisplayName',
        'dominant_hand' => 'setDominantHand',
        'double_plant' => 'setDoublePlant',
        'drops' => 'setDrops',
        'durability' => 'setDurability',
        'dye' => 'setDye',
        'enchantments' => 'setEnchantments',
        'end_gateway' => 'setEndGateway',
        'exp_orb' => 'setExpOrb',
        'experience' => 'setExperience',
        'expire_ticks' => 'setExpireTicks',
        'explosion_radius' => 'setExplosionRadius',
        'extended' => 'setExtended',
        'fall_distance' => 'setFallDistance',
        'falling_block' => 'setFallingBlock',
        'filled' => 'setFilled',
        'firework_effects' => 'setFireworkEffects',
        'firework_rocket' => 'setFireworkRocket',
        'fish' => 'setFish',
        'flammable' => 'setFlammable',
        'fluid' => 'setFluid',
        'fluid_level' => 'setFluidLevel',
        'fluid_tanks' => 'setFluidTanks',
        'flying' => 'setFlying',
        'flying_ability' => 'setFlyingAbility',
        'food' => 'setFood',
        'furnace' => 'setFurnace',
        'fuse' => 'setFuse',
        'game_mode' => 'setGameMode',
        'generation' => 'setGeneration',
        'glowing' => 'setGlowing',
        'golden_apple' => 'setGoldenApple',
        'griefs' => 'setGriefs',
        'growth' => 'setGrowth',
        'health' => 'setHealth',
        'hide' => 'setHide',
        'hinge' => 'setHinge',
        'horse' => 'setHorse',
        'igniteable' => 'setIgniteable',
        'in_wall' => 'setInWall',
        'inventory' => 'setInventory',
        'invisibility' => 'setInvisibility',
        'invulnerability' => 'setInvulnerability',
        'joined' => 'setJoined',
        'knockback' => 'setKnockback',
        'layer' => 'setLayer',
        'leash' => 'setLeash',
        'lock_token' => 'setLockToken',
        'log_axis' => 'setLogAxis',
        'lore' => 'setLore',
        'minecart_block' => 'setMinecartBlock',
        'mob_spawner' => 'setMobSpawner',
        'moisture' => 'setMoisture',
        'note' => 'setNote',
        'occupied' => 'setOccupied',
        'ocelot' => 'setOcelot',
        'open' => 'setOpen',
        'pages' => 'setPages',
        'passengers' => 'setPassengers',
        'persists' => 'setPersists',
        'pickup_delay' => 'setPickupDelay',
        'pickup_rule' => 'setPickupRule',
        'pig_saddle' => 'setPigSaddle',
        'piston' => 'setPiston',
        'placeable_on' => 'setPlaceableOn',
        'plant' => 'setPlant',
        'player_created' => 'setPlayerCreated',
        'playing' => 'setPlaying',
        'portion' => 'setPortion',
        'potion_effects' => 'setPotionEffects',
        'powered' => 'setPowered',
        'prismarine' => 'setPrismarine',
        'quartz' => 'setQuartz',
        'rabbit' => 'setRabbit',
        'rail_direction' => 'setRailDirection',
        'redstone_power' => 'setRedstonePower',
        'represented_item' => 'setRepresentedItem',
        'represented_player' => 'setRepresentedPlayer',
        'respawn_locations' => 'setRespawnLocations',
        'sand' => 'setSand',
        'sand_stone' => 'setSandStone',
        'screaming' => 'setScreaming',
        'seamless' => 'setSeamless',
        'shatters' => 'setShatters',
        'sheared' => 'setSheared',
        'shrub' => 'setShrub',
        'sign' => 'setSign',
        'silent' => 'setSilent',
        'sitting' => 'setSitting',
        'skin' => 'setSkin',
        'skull' => 'setSkull',
        'slab' => 'setSlab',
        'sleeping' => 'setSleeping',
        'slime' => 'setSlime',
        'sneaking' => 'setSneaking',
        'snow' => 'setSnow',
        'spawn' => 'setSpawn',
        'sprinting' => 'setSprinting',
        'stair_shape' => 'setStairShape',
        'statistics' => 'setStatistics',
        'stone' => 'setStone',
        'stored_enchantments' => 'setStoredEnchantments',
        'structure' => 'setStructure',
        'stuck_arrows' => 'setStuckArrows',
        'tamed' => 'setTamed',
        'target' => 'setTarget',
        'trades' => 'setTrades',
        'tree' => 'setTree',
        'vehicle' => 'setVehicle',
        'wall' => 'setWall',
        'wet' => 'setWet',
        'wires' => 'setWires',
        'accepts_items' => 'setAcceptsItems',
        'applicable_effect' => 'setApplicableEffect',
        'armor_slot_type' => 'setArmorSlotType',
        'armor_type' => 'setArmorType',
        'blast_resistance' => 'setBlastResistance',
        'burning_fuel' => 'setBurningFuel',
        'damage_absorption' => 'setDamageAbsorption',
        'efficiency' => 'setEfficiency',
        'equipment_type' => 'setEquipmentType',
        'equiptment_slot_type' => 'setEquiptmentSlotType',
        'eye_height' => 'setEyeHeight',
        'eye_location' => 'setEyeLocation',
        'fluid_temperature' => 'setFluidTemperature',
        'fluid_viscosity' => 'setFluidViscosity',
        'food_restoration' => 'setFoodRestoration',
        'full_block_selection_box' => 'setFullBlockSelectionBox',
        'gravity_affected' => 'setGravityAffected',
        'ground_luminance' => 'setGroundLuminance',
        'gui_id' => 'setGuiId',
        'hardness' => 'setHardness',
        'held_item' => 'setHeldItem',
        'identifiable' => 'setIdentifiable',
        'indirectly_powered' => 'setIndirectlyPowered',
        'instrument' => 'setInstrument',
        'inventory_capacity' => 'setInventoryCapacity',
        'inventory_dimension' => 'setInventoryDimension',
        'inventory_title' => 'setInventoryTitle',
        'light_emission' => 'setLightEmission',
        'matter' => 'setMatter',
        'passable' => 'setPassable',
        'record' => 'setRecord',
        'replaceable' => 'setReplaceable',
        'saturation_property' => 'setSaturationProperty',
        'sky_luminance' => 'setSkyLuminance',
        'slot_index' => 'setSlotIndex',
        'slot_pos' => 'setSlotPos',
        'slot_side' => 'setSlotSide',
        'smeltable' => 'setSmeltable',
        'solid_cube' => 'setSolidCube',
        'statistics_tracked' => 'setStatisticsTracked',
        'surrogate_block' => 'setSurrogateBlock',
        'temperature' => 'setTemperature',
        'tool_type' => 'setToolType',
        'unbreakable' => 'setUnbreakable',
        'use_limit' => 'setUseLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quantity' => 'getQuantity',
        'type' => 'getType',
        'absorption' => 'getAbsorption',
        'age' => 'getAge',
        'aggressive' => 'getAggressive',
        'ai_enabled' => 'getAiEnabled',
        'anger_level' => 'getAngerLevel',
        'armor_stand' => 'getArmorStand',
        'art' => 'getArt',
        'attached' => 'getAttached',
        'author' => 'getAuthor',
        'axis' => 'getAxis',
        'banner' => 'getBanner',
        'beacon' => 'getBeacon',
        'big_mushroom' => 'getBigMushroom',
        'block' => 'getBlock',
        'breathing' => 'getBreathing',
        'breedable' => 'getBreedable',
        'brewing_stand' => 'getBrewingStand',
        'brick' => 'getBrick',
        'career' => 'getCareer',
        'charged' => 'getCharged',
        'coal' => 'getCoal',
        'color' => 'getColor',
        'command' => 'getCommand',
        'comparator' => 'getComparator',
        'connected_direction' => 'getConnectedDirection',
        'cooked_fish' => 'getCookedFish',
        'cooldown' => 'getCooldown',
        'critical_hit' => 'getCriticalHit',
        'custom_name' => 'getCustomName',
        'damage' => 'getDamage',
        'damageable' => 'getDamageable',
        'decayable' => 'getDecayable',
        'delay' => 'getDelay',
        'despawn_delay' => 'getDespawnDelay',
        'direction' => 'getDirection',
        'dirt' => 'getDirt',
        'disarmed' => 'getDisarmed',
        'disguised_block' => 'getDisguisedBlock',
        'display_name' => 'getDisplayName',
        'dominant_hand' => 'getDominantHand',
        'double_plant' => 'getDoublePlant',
        'drops' => 'getDrops',
        'durability' => 'getDurability',
        'dye' => 'getDye',
        'enchantments' => 'getEnchantments',
        'end_gateway' => 'getEndGateway',
        'exp_orb' => 'getExpOrb',
        'experience' => 'getExperience',
        'expire_ticks' => 'getExpireTicks',
        'explosion_radius' => 'getExplosionRadius',
        'extended' => 'getExtended',
        'fall_distance' => 'getFallDistance',
        'falling_block' => 'getFallingBlock',
        'filled' => 'getFilled',
        'firework_effects' => 'getFireworkEffects',
        'firework_rocket' => 'getFireworkRocket',
        'fish' => 'getFish',
        'flammable' => 'getFlammable',
        'fluid' => 'getFluid',
        'fluid_level' => 'getFluidLevel',
        'fluid_tanks' => 'getFluidTanks',
        'flying' => 'getFlying',
        'flying_ability' => 'getFlyingAbility',
        'food' => 'getFood',
        'furnace' => 'getFurnace',
        'fuse' => 'getFuse',
        'game_mode' => 'getGameMode',
        'generation' => 'getGeneration',
        'glowing' => 'getGlowing',
        'golden_apple' => 'getGoldenApple',
        'griefs' => 'getGriefs',
        'growth' => 'getGrowth',
        'health' => 'getHealth',
        'hide' => 'getHide',
        'hinge' => 'getHinge',
        'horse' => 'getHorse',
        'igniteable' => 'getIgniteable',
        'in_wall' => 'getInWall',
        'inventory' => 'getInventory',
        'invisibility' => 'getInvisibility',
        'invulnerability' => 'getInvulnerability',
        'joined' => 'getJoined',
        'knockback' => 'getKnockback',
        'layer' => 'getLayer',
        'leash' => 'getLeash',
        'lock_token' => 'getLockToken',
        'log_axis' => 'getLogAxis',
        'lore' => 'getLore',
        'minecart_block' => 'getMinecartBlock',
        'mob_spawner' => 'getMobSpawner',
        'moisture' => 'getMoisture',
        'note' => 'getNote',
        'occupied' => 'getOccupied',
        'ocelot' => 'getOcelot',
        'open' => 'getOpen',
        'pages' => 'getPages',
        'passengers' => 'getPassengers',
        'persists' => 'getPersists',
        'pickup_delay' => 'getPickupDelay',
        'pickup_rule' => 'getPickupRule',
        'pig_saddle' => 'getPigSaddle',
        'piston' => 'getPiston',
        'placeable_on' => 'getPlaceableOn',
        'plant' => 'getPlant',
        'player_created' => 'getPlayerCreated',
        'playing' => 'getPlaying',
        'portion' => 'getPortion',
        'potion_effects' => 'getPotionEffects',
        'powered' => 'getPowered',
        'prismarine' => 'getPrismarine',
        'quartz' => 'getQuartz',
        'rabbit' => 'getRabbit',
        'rail_direction' => 'getRailDirection',
        'redstone_power' => 'getRedstonePower',
        'represented_item' => 'getRepresentedItem',
        'represented_player' => 'getRepresentedPlayer',
        'respawn_locations' => 'getRespawnLocations',
        'sand' => 'getSand',
        'sand_stone' => 'getSandStone',
        'screaming' => 'getScreaming',
        'seamless' => 'getSeamless',
        'shatters' => 'getShatters',
        'sheared' => 'getSheared',
        'shrub' => 'getShrub',
        'sign' => 'getSign',
        'silent' => 'getSilent',
        'sitting' => 'getSitting',
        'skin' => 'getSkin',
        'skull' => 'getSkull',
        'slab' => 'getSlab',
        'sleeping' => 'getSleeping',
        'slime' => 'getSlime',
        'sneaking' => 'getSneaking',
        'snow' => 'getSnow',
        'spawn' => 'getSpawn',
        'sprinting' => 'getSprinting',
        'stair_shape' => 'getStairShape',
        'statistics' => 'getStatistics',
        'stone' => 'getStone',
        'stored_enchantments' => 'getStoredEnchantments',
        'structure' => 'getStructure',
        'stuck_arrows' => 'getStuckArrows',
        'tamed' => 'getTamed',
        'target' => 'getTarget',
        'trades' => 'getTrades',
        'tree' => 'getTree',
        'vehicle' => 'getVehicle',
        'wall' => 'getWall',
        'wet' => 'getWet',
        'wires' => 'getWires',
        'accepts_items' => 'getAcceptsItems',
        'applicable_effect' => 'getApplicableEffect',
        'armor_slot_type' => 'getArmorSlotType',
        'armor_type' => 'getArmorType',
        'blast_resistance' => 'getBlastResistance',
        'burning_fuel' => 'getBurningFuel',
        'damage_absorption' => 'getDamageAbsorption',
        'efficiency' => 'getEfficiency',
        'equipment_type' => 'getEquipmentType',
        'equiptment_slot_type' => 'getEquiptmentSlotType',
        'eye_height' => 'getEyeHeight',
        'eye_location' => 'getEyeLocation',
        'fluid_temperature' => 'getFluidTemperature',
        'fluid_viscosity' => 'getFluidViscosity',
        'food_restoration' => 'getFoodRestoration',
        'full_block_selection_box' => 'getFullBlockSelectionBox',
        'gravity_affected' => 'getGravityAffected',
        'ground_luminance' => 'getGroundLuminance',
        'gui_id' => 'getGuiId',
        'hardness' => 'getHardness',
        'held_item' => 'getHeldItem',
        'identifiable' => 'getIdentifiable',
        'indirectly_powered' => 'getIndirectlyPowered',
        'instrument' => 'getInstrument',
        'inventory_capacity' => 'getInventoryCapacity',
        'inventory_dimension' => 'getInventoryDimension',
        'inventory_title' => 'getInventoryTitle',
        'light_emission' => 'getLightEmission',
        'matter' => 'getMatter',
        'passable' => 'getPassable',
        'record' => 'getRecord',
        'replaceable' => 'getReplaceable',
        'saturation_property' => 'getSaturationProperty',
        'sky_luminance' => 'getSkyLuminance',
        'slot_index' => 'getSlotIndex',
        'slot_pos' => 'getSlotPos',
        'slot_side' => 'getSlotSide',
        'smeltable' => 'getSmeltable',
        'solid_cube' => 'getSolidCube',
        'statistics_tracked' => 'getStatisticsTracked',
        'surrogate_block' => 'getSurrogateBlock',
        'temperature' => 'getTemperature',
        'tool_type' => 'getToolType',
        'unbreakable' => 'getUnbreakable',
        'use_limit' => 'getUseLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AXIS_X = 'X';
    const AXIS_Y = 'Y';
    const AXIS_Z = 'Z';
    const CONNECTED_DIRECTION_NORTH = 'NORTH';
    const CONNECTED_DIRECTION_NORTH_NORTHEAST = 'NORTH_NORTHEAST';
    const CONNECTED_DIRECTION_NORTHEAST = 'NORTHEAST';
    const CONNECTED_DIRECTION_EAST_NORTHEAST = 'EAST_NORTHEAST';
    const CONNECTED_DIRECTION_EAST = 'EAST';
    const CONNECTED_DIRECTION_EAST_SOUTHEAST = 'EAST_SOUTHEAST';
    const CONNECTED_DIRECTION_SOUTHEAST = 'SOUTHEAST';
    const CONNECTED_DIRECTION_SOUTH_SOUTHEAST = 'SOUTH_SOUTHEAST';
    const CONNECTED_DIRECTION_SOUTH = 'SOUTH';
    const CONNECTED_DIRECTION_SOUTH_SOUTHWEST = 'SOUTH_SOUTHWEST';
    const CONNECTED_DIRECTION_SOUTHWEST = 'SOUTHWEST';
    const CONNECTED_DIRECTION_WEST_SOUTHWEST = 'WEST_SOUTHWEST';
    const CONNECTED_DIRECTION_WEST = 'WEST';
    const CONNECTED_DIRECTION_WEST_NORTHWEST = 'WEST_NORTHWEST';
    const CONNECTED_DIRECTION_NORTHWEST = 'NORTHWEST';
    const CONNECTED_DIRECTION_NORTH_NORTHWEST = 'NORTH_NORTHWEST';
    const CONNECTED_DIRECTION_UP = 'UP';
    const CONNECTED_DIRECTION_DOWN = 'DOWN';
    const CONNECTED_DIRECTION_NONE = 'NONE';
    const DIRECTION_NORTH = 'NORTH';
    const DIRECTION_NORTH_NORTHEAST = 'NORTH_NORTHEAST';
    const DIRECTION_NORTHEAST = 'NORTHEAST';
    const DIRECTION_EAST_NORTHEAST = 'EAST_NORTHEAST';
    const DIRECTION_EAST = 'EAST';
    const DIRECTION_EAST_SOUTHEAST = 'EAST_SOUTHEAST';
    const DIRECTION_SOUTHEAST = 'SOUTHEAST';
    const DIRECTION_SOUTH_SOUTHEAST = 'SOUTH_SOUTHEAST';
    const DIRECTION_SOUTH = 'SOUTH';
    const DIRECTION_SOUTH_SOUTHWEST = 'SOUTH_SOUTHWEST';
    const DIRECTION_SOUTHWEST = 'SOUTHWEST';
    const DIRECTION_WEST_SOUTHWEST = 'WEST_SOUTHWEST';
    const DIRECTION_WEST = 'WEST';
    const DIRECTION_WEST_NORTHWEST = 'WEST_NORTHWEST';
    const DIRECTION_NORTHWEST = 'NORTHWEST';
    const DIRECTION_NORTH_NORTHWEST = 'NORTH_NORTHWEST';
    const DIRECTION_UP = 'UP';
    const DIRECTION_DOWN = 'DOWN';
    const DIRECTION_NONE = 'NONE';
    const MATTER_SOLID = 'SOLID';
    const MATTER_LIQUID = 'LIQUID';
    const MATTER_GAS = 'GAS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAxisAllowableValues()
    {
        return [
            self::AXIS_X,
            self::AXIS_Y,
            self::AXIS_Z,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectedDirectionAllowableValues()
    {
        return [
            self::CONNECTED_DIRECTION_NORTH,
            self::CONNECTED_DIRECTION_NORTH_NORTHEAST,
            self::CONNECTED_DIRECTION_NORTHEAST,
            self::CONNECTED_DIRECTION_EAST_NORTHEAST,
            self::CONNECTED_DIRECTION_EAST,
            self::CONNECTED_DIRECTION_EAST_SOUTHEAST,
            self::CONNECTED_DIRECTION_SOUTHEAST,
            self::CONNECTED_DIRECTION_SOUTH_SOUTHEAST,
            self::CONNECTED_DIRECTION_SOUTH,
            self::CONNECTED_DIRECTION_SOUTH_SOUTHWEST,
            self::CONNECTED_DIRECTION_SOUTHWEST,
            self::CONNECTED_DIRECTION_WEST_SOUTHWEST,
            self::CONNECTED_DIRECTION_WEST,
            self::CONNECTED_DIRECTION_WEST_NORTHWEST,
            self::CONNECTED_DIRECTION_NORTHWEST,
            self::CONNECTED_DIRECTION_NORTH_NORTHWEST,
            self::CONNECTED_DIRECTION_UP,
            self::CONNECTED_DIRECTION_DOWN,
            self::CONNECTED_DIRECTION_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_NORTH,
            self::DIRECTION_NORTH_NORTHEAST,
            self::DIRECTION_NORTHEAST,
            self::DIRECTION_EAST_NORTHEAST,
            self::DIRECTION_EAST,
            self::DIRECTION_EAST_SOUTHEAST,
            self::DIRECTION_SOUTHEAST,
            self::DIRECTION_SOUTH_SOUTHEAST,
            self::DIRECTION_SOUTH,
            self::DIRECTION_SOUTH_SOUTHWEST,
            self::DIRECTION_SOUTHWEST,
            self::DIRECTION_WEST_SOUTHWEST,
            self::DIRECTION_WEST,
            self::DIRECTION_WEST_NORTHWEST,
            self::DIRECTION_NORTHWEST,
            self::DIRECTION_NORTH_NORTHWEST,
            self::DIRECTION_UP,
            self::DIRECTION_DOWN,
            self::DIRECTION_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMatterAllowableValues()
    {
        return [
            self::MATTER_SOLID,
            self::MATTER_LIQUID,
            self::MATTER_GAS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['absorption'] = isset($data['absorption']) ? $data['absorption'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['aggressive'] = isset($data['aggressive']) ? $data['aggressive'] : null;
        $this->container['ai_enabled'] = isset($data['ai_enabled']) ? $data['ai_enabled'] : null;
        $this->container['anger_level'] = isset($data['anger_level']) ? $data['anger_level'] : null;
        $this->container['armor_stand'] = isset($data['armor_stand']) ? $data['armor_stand'] : null;
        $this->container['art'] = isset($data['art']) ? $data['art'] : null;
        $this->container['attached'] = isset($data['attached']) ? $data['attached'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['axis'] = isset($data['axis']) ? $data['axis'] : null;
        $this->container['banner'] = isset($data['banner']) ? $data['banner'] : null;
        $this->container['beacon'] = isset($data['beacon']) ? $data['beacon'] : null;
        $this->container['big_mushroom'] = isset($data['big_mushroom']) ? $data['big_mushroom'] : null;
        $this->container['block'] = isset($data['block']) ? $data['block'] : null;
        $this->container['breathing'] = isset($data['breathing']) ? $data['breathing'] : null;
        $this->container['breedable'] = isset($data['breedable']) ? $data['breedable'] : null;
        $this->container['brewing_stand'] = isset($data['brewing_stand']) ? $data['brewing_stand'] : null;
        $this->container['brick'] = isset($data['brick']) ? $data['brick'] : null;
        $this->container['career'] = isset($data['career']) ? $data['career'] : null;
        $this->container['charged'] = isset($data['charged']) ? $data['charged'] : null;
        $this->container['coal'] = isset($data['coal']) ? $data['coal'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['command'] = isset($data['command']) ? $data['command'] : null;
        $this->container['comparator'] = isset($data['comparator']) ? $data['comparator'] : null;
        $this->container['connected_direction'] = isset($data['connected_direction']) ? $data['connected_direction'] : null;
        $this->container['cooked_fish'] = isset($data['cooked_fish']) ? $data['cooked_fish'] : null;
        $this->container['cooldown'] = isset($data['cooldown']) ? $data['cooldown'] : null;
        $this->container['critical_hit'] = isset($data['critical_hit']) ? $data['critical_hit'] : null;
        $this->container['custom_name'] = isset($data['custom_name']) ? $data['custom_name'] : null;
        $this->container['damage'] = isset($data['damage']) ? $data['damage'] : null;
        $this->container['damageable'] = isset($data['damageable']) ? $data['damageable'] : null;
        $this->container['decayable'] = isset($data['decayable']) ? $data['decayable'] : null;
        $this->container['delay'] = isset($data['delay']) ? $data['delay'] : null;
        $this->container['despawn_delay'] = isset($data['despawn_delay']) ? $data['despawn_delay'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['dirt'] = isset($data['dirt']) ? $data['dirt'] : null;
        $this->container['disarmed'] = isset($data['disarmed']) ? $data['disarmed'] : null;
        $this->container['disguised_block'] = isset($data['disguised_block']) ? $data['disguised_block'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['dominant_hand'] = isset($data['dominant_hand']) ? $data['dominant_hand'] : null;
        $this->container['double_plant'] = isset($data['double_plant']) ? $data['double_plant'] : null;
        $this->container['drops'] = isset($data['drops']) ? $data['drops'] : null;
        $this->container['durability'] = isset($data['durability']) ? $data['durability'] : null;
        $this->container['dye'] = isset($data['dye']) ? $data['dye'] : null;
        $this->container['enchantments'] = isset($data['enchantments']) ? $data['enchantments'] : null;
        $this->container['end_gateway'] = isset($data['end_gateway']) ? $data['end_gateway'] : null;
        $this->container['exp_orb'] = isset($data['exp_orb']) ? $data['exp_orb'] : null;
        $this->container['experience'] = isset($data['experience']) ? $data['experience'] : null;
        $this->container['expire_ticks'] = isset($data['expire_ticks']) ? $data['expire_ticks'] : null;
        $this->container['explosion_radius'] = isset($data['explosion_radius']) ? $data['explosion_radius'] : null;
        $this->container['extended'] = isset($data['extended']) ? $data['extended'] : null;
        $this->container['fall_distance'] = isset($data['fall_distance']) ? $data['fall_distance'] : null;
        $this->container['falling_block'] = isset($data['falling_block']) ? $data['falling_block'] : null;
        $this->container['filled'] = isset($data['filled']) ? $data['filled'] : null;
        $this->container['firework_effects'] = isset($data['firework_effects']) ? $data['firework_effects'] : null;
        $this->container['firework_rocket'] = isset($data['firework_rocket']) ? $data['firework_rocket'] : null;
        $this->container['fish'] = isset($data['fish']) ? $data['fish'] : null;
        $this->container['flammable'] = isset($data['flammable']) ? $data['flammable'] : null;
        $this->container['fluid'] = isset($data['fluid']) ? $data['fluid'] : null;
        $this->container['fluid_level'] = isset($data['fluid_level']) ? $data['fluid_level'] : null;
        $this->container['fluid_tanks'] = isset($data['fluid_tanks']) ? $data['fluid_tanks'] : null;
        $this->container['flying'] = isset($data['flying']) ? $data['flying'] : null;
        $this->container['flying_ability'] = isset($data['flying_ability']) ? $data['flying_ability'] : null;
        $this->container['food'] = isset($data['food']) ? $data['food'] : null;
        $this->container['furnace'] = isset($data['furnace']) ? $data['furnace'] : null;
        $this->container['fuse'] = isset($data['fuse']) ? $data['fuse'] : null;
        $this->container['game_mode'] = isset($data['game_mode']) ? $data['game_mode'] : null;
        $this->container['generation'] = isset($data['generation']) ? $data['generation'] : null;
        $this->container['glowing'] = isset($data['glowing']) ? $data['glowing'] : null;
        $this->container['golden_apple'] = isset($data['golden_apple']) ? $data['golden_apple'] : null;
        $this->container['griefs'] = isset($data['griefs']) ? $data['griefs'] : null;
        $this->container['growth'] = isset($data['growth']) ? $data['growth'] : null;
        $this->container['health'] = isset($data['health']) ? $data['health'] : null;
        $this->container['hide'] = isset($data['hide']) ? $data['hide'] : null;
        $this->container['hinge'] = isset($data['hinge']) ? $data['hinge'] : null;
        $this->container['horse'] = isset($data['horse']) ? $data['horse'] : null;
        $this->container['igniteable'] = isset($data['igniteable']) ? $data['igniteable'] : null;
        $this->container['in_wall'] = isset($data['in_wall']) ? $data['in_wall'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['invisibility'] = isset($data['invisibility']) ? $data['invisibility'] : null;
        $this->container['invulnerability'] = isset($data['invulnerability']) ? $data['invulnerability'] : null;
        $this->container['joined'] = isset($data['joined']) ? $data['joined'] : null;
        $this->container['knockback'] = isset($data['knockback']) ? $data['knockback'] : null;
        $this->container['layer'] = isset($data['layer']) ? $data['layer'] : null;
        $this->container['leash'] = isset($data['leash']) ? $data['leash'] : null;
        $this->container['lock_token'] = isset($data['lock_token']) ? $data['lock_token'] : null;
        $this->container['log_axis'] = isset($data['log_axis']) ? $data['log_axis'] : null;
        $this->container['lore'] = isset($data['lore']) ? $data['lore'] : null;
        $this->container['minecart_block'] = isset($data['minecart_block']) ? $data['minecart_block'] : null;
        $this->container['mob_spawner'] = isset($data['mob_spawner']) ? $data['mob_spawner'] : null;
        $this->container['moisture'] = isset($data['moisture']) ? $data['moisture'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['occupied'] = isset($data['occupied']) ? $data['occupied'] : null;
        $this->container['ocelot'] = isset($data['ocelot']) ? $data['ocelot'] : null;
        $this->container['open'] = isset($data['open']) ? $data['open'] : null;
        $this->container['pages'] = isset($data['pages']) ? $data['pages'] : null;
        $this->container['passengers'] = isset($data['passengers']) ? $data['passengers'] : null;
        $this->container['persists'] = isset($data['persists']) ? $data['persists'] : null;
        $this->container['pickup_delay'] = isset($data['pickup_delay']) ? $data['pickup_delay'] : null;
        $this->container['pickup_rule'] = isset($data['pickup_rule']) ? $data['pickup_rule'] : null;
        $this->container['pig_saddle'] = isset($data['pig_saddle']) ? $data['pig_saddle'] : null;
        $this->container['piston'] = isset($data['piston']) ? $data['piston'] : null;
        $this->container['placeable_on'] = isset($data['placeable_on']) ? $data['placeable_on'] : null;
        $this->container['plant'] = isset($data['plant']) ? $data['plant'] : null;
        $this->container['player_created'] = isset($data['player_created']) ? $data['player_created'] : null;
        $this->container['playing'] = isset($data['playing']) ? $data['playing'] : null;
        $this->container['portion'] = isset($data['portion']) ? $data['portion'] : null;
        $this->container['potion_effects'] = isset($data['potion_effects']) ? $data['potion_effects'] : null;
        $this->container['powered'] = isset($data['powered']) ? $data['powered'] : null;
        $this->container['prismarine'] = isset($data['prismarine']) ? $data['prismarine'] : null;
        $this->container['quartz'] = isset($data['quartz']) ? $data['quartz'] : null;
        $this->container['rabbit'] = isset($data['rabbit']) ? $data['rabbit'] : null;
        $this->container['rail_direction'] = isset($data['rail_direction']) ? $data['rail_direction'] : null;
        $this->container['redstone_power'] = isset($data['redstone_power']) ? $data['redstone_power'] : null;
        $this->container['represented_item'] = isset($data['represented_item']) ? $data['represented_item'] : null;
        $this->container['represented_player'] = isset($data['represented_player']) ? $data['represented_player'] : null;
        $this->container['respawn_locations'] = isset($data['respawn_locations']) ? $data['respawn_locations'] : null;
        $this->container['sand'] = isset($data['sand']) ? $data['sand'] : null;
        $this->container['sand_stone'] = isset($data['sand_stone']) ? $data['sand_stone'] : null;
        $this->container['screaming'] = isset($data['screaming']) ? $data['screaming'] : null;
        $this->container['seamless'] = isset($data['seamless']) ? $data['seamless'] : null;
        $this->container['shatters'] = isset($data['shatters']) ? $data['shatters'] : null;
        $this->container['sheared'] = isset($data['sheared']) ? $data['sheared'] : null;
        $this->container['shrub'] = isset($data['shrub']) ? $data['shrub'] : null;
        $this->container['sign'] = isset($data['sign']) ? $data['sign'] : null;
        $this->container['silent'] = isset($data['silent']) ? $data['silent'] : null;
        $this->container['sitting'] = isset($data['sitting']) ? $data['sitting'] : null;
        $this->container['skin'] = isset($data['skin']) ? $data['skin'] : null;
        $this->container['skull'] = isset($data['skull']) ? $data['skull'] : null;
        $this->container['slab'] = isset($data['slab']) ? $data['slab'] : null;
        $this->container['sleeping'] = isset($data['sleeping']) ? $data['sleeping'] : null;
        $this->container['slime'] = isset($data['slime']) ? $data['slime'] : null;
        $this->container['sneaking'] = isset($data['sneaking']) ? $data['sneaking'] : null;
        $this->container['snow'] = isset($data['snow']) ? $data['snow'] : null;
        $this->container['spawn'] = isset($data['spawn']) ? $data['spawn'] : null;
        $this->container['sprinting'] = isset($data['sprinting']) ? $data['sprinting'] : null;
        $this->container['stair_shape'] = isset($data['stair_shape']) ? $data['stair_shape'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['stone'] = isset($data['stone']) ? $data['stone'] : null;
        $this->container['stored_enchantments'] = isset($data['stored_enchantments']) ? $data['stored_enchantments'] : null;
        $this->container['structure'] = isset($data['structure']) ? $data['structure'] : null;
        $this->container['stuck_arrows'] = isset($data['stuck_arrows']) ? $data['stuck_arrows'] : null;
        $this->container['tamed'] = isset($data['tamed']) ? $data['tamed'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['trades'] = isset($data['trades']) ? $data['trades'] : null;
        $this->container['tree'] = isset($data['tree']) ? $data['tree'] : null;
        $this->container['vehicle'] = isset($data['vehicle']) ? $data['vehicle'] : null;
        $this->container['wall'] = isset($data['wall']) ? $data['wall'] : null;
        $this->container['wet'] = isset($data['wet']) ? $data['wet'] : null;
        $this->container['wires'] = isset($data['wires']) ? $data['wires'] : null;
        $this->container['accepts_items'] = isset($data['accepts_items']) ? $data['accepts_items'] : null;
        $this->container['applicable_effect'] = isset($data['applicable_effect']) ? $data['applicable_effect'] : null;
        $this->container['armor_slot_type'] = isset($data['armor_slot_type']) ? $data['armor_slot_type'] : null;
        $this->container['armor_type'] = isset($data['armor_type']) ? $data['armor_type'] : null;
        $this->container['blast_resistance'] = isset($data['blast_resistance']) ? $data['blast_resistance'] : null;
        $this->container['burning_fuel'] = isset($data['burning_fuel']) ? $data['burning_fuel'] : null;
        $this->container['damage_absorption'] = isset($data['damage_absorption']) ? $data['damage_absorption'] : null;
        $this->container['efficiency'] = isset($data['efficiency']) ? $data['efficiency'] : null;
        $this->container['equipment_type'] = isset($data['equipment_type']) ? $data['equipment_type'] : null;
        $this->container['equiptment_slot_type'] = isset($data['equiptment_slot_type']) ? $data['equiptment_slot_type'] : null;
        $this->container['eye_height'] = isset($data['eye_height']) ? $data['eye_height'] : null;
        $this->container['eye_location'] = isset($data['eye_location']) ? $data['eye_location'] : null;
        $this->container['fluid_temperature'] = isset($data['fluid_temperature']) ? $data['fluid_temperature'] : null;
        $this->container['fluid_viscosity'] = isset($data['fluid_viscosity']) ? $data['fluid_viscosity'] : null;
        $this->container['food_restoration'] = isset($data['food_restoration']) ? $data['food_restoration'] : null;
        $this->container['full_block_selection_box'] = isset($data['full_block_selection_box']) ? $data['full_block_selection_box'] : null;
        $this->container['gravity_affected'] = isset($data['gravity_affected']) ? $data['gravity_affected'] : null;
        $this->container['ground_luminance'] = isset($data['ground_luminance']) ? $data['ground_luminance'] : null;
        $this->container['gui_id'] = isset($data['gui_id']) ? $data['gui_id'] : null;
        $this->container['hardness'] = isset($data['hardness']) ? $data['hardness'] : null;
        $this->container['held_item'] = isset($data['held_item']) ? $data['held_item'] : null;
        $this->container['identifiable'] = isset($data['identifiable']) ? $data['identifiable'] : null;
        $this->container['indirectly_powered'] = isset($data['indirectly_powered']) ? $data['indirectly_powered'] : null;
        $this->container['instrument'] = isset($data['instrument']) ? $data['instrument'] : null;
        $this->container['inventory_capacity'] = isset($data['inventory_capacity']) ? $data['inventory_capacity'] : null;
        $this->container['inventory_dimension'] = isset($data['inventory_dimension']) ? $data['inventory_dimension'] : null;
        $this->container['inventory_title'] = isset($data['inventory_title']) ? $data['inventory_title'] : null;
        $this->container['light_emission'] = isset($data['light_emission']) ? $data['light_emission'] : null;
        $this->container['matter'] = isset($data['matter']) ? $data['matter'] : null;
        $this->container['passable'] = isset($data['passable']) ? $data['passable'] : null;
        $this->container['record'] = isset($data['record']) ? $data['record'] : null;
        $this->container['replaceable'] = isset($data['replaceable']) ? $data['replaceable'] : null;
        $this->container['saturation_property'] = isset($data['saturation_property']) ? $data['saturation_property'] : null;
        $this->container['sky_luminance'] = isset($data['sky_luminance']) ? $data['sky_luminance'] : null;
        $this->container['slot_index'] = isset($data['slot_index']) ? $data['slot_index'] : null;
        $this->container['slot_pos'] = isset($data['slot_pos']) ? $data['slot_pos'] : null;
        $this->container['slot_side'] = isset($data['slot_side']) ? $data['slot_side'] : null;
        $this->container['smeltable'] = isset($data['smeltable']) ? $data['smeltable'] : null;
        $this->container['solid_cube'] = isset($data['solid_cube']) ? $data['solid_cube'] : null;
        $this->container['statistics_tracked'] = isset($data['statistics_tracked']) ? $data['statistics_tracked'] : null;
        $this->container['surrogate_block'] = isset($data['surrogate_block']) ? $data['surrogate_block'] : null;
        $this->container['temperature'] = isset($data['temperature']) ? $data['temperature'] : null;
        $this->container['tool_type'] = isset($data['tool_type']) ? $data['tool_type'] : null;
        $this->container['unbreakable'] = isset($data['unbreakable']) ? $data['unbreakable'] : null;
        $this->container['use_limit'] = isset($data['use_limit']) ? $data['use_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getAxisAllowableValues();
        if (!is_null($this->container['axis']) && !in_array($this->container['axis'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'axis', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMatterAllowableValues();
        if (!is_null($this->container['matter']) && !in_array($this->container['matter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'matter', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity of items in this stack
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\CatalogType $type The type of this item
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets absorption
     *
     * @return double
     */
    public function getAbsorption()
    {
        return $this->container['absorption'];
    }

    /**
     * Sets absorption
     *
     * @param double $absorption absorption
     *
     * @return $this
     */
    public function setAbsorption($absorption)
    {
        $this->container['absorption'] = $absorption;

        return $this;
    }

    /**
     * Gets age
     *
     * @return \Swagger\Client\Model\AgeableData
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param \Swagger\Client\Model\AgeableData $age age
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets aggressive
     *
     * @return bool
     */
    public function getAggressive()
    {
        return $this->container['aggressive'];
    }

    /**
     * Sets aggressive
     *
     * @param bool $aggressive aggressive
     *
     * @return $this
     */
    public function setAggressive($aggressive)
    {
        $this->container['aggressive'] = $aggressive;

        return $this;
    }

    /**
     * Gets ai_enabled
     *
     * @return bool
     */
    public function getAiEnabled()
    {
        return $this->container['ai_enabled'];
    }

    /**
     * Sets ai_enabled
     *
     * @param bool $ai_enabled ai_enabled
     *
     * @return $this
     */
    public function setAiEnabled($ai_enabled)
    {
        $this->container['ai_enabled'] = $ai_enabled;

        return $this;
    }

    /**
     * Gets anger_level
     *
     * @return int
     */
    public function getAngerLevel()
    {
        return $this->container['anger_level'];
    }

    /**
     * Sets anger_level
     *
     * @param int $anger_level anger_level
     *
     * @return $this
     */
    public function setAngerLevel($anger_level)
    {
        $this->container['anger_level'] = $anger_level;

        return $this;
    }

    /**
     * Gets armor_stand
     *
     * @return \Swagger\Client\Model\ArmorStandData
     */
    public function getArmorStand()
    {
        return $this->container['armor_stand'];
    }

    /**
     * Sets armor_stand
     *
     * @param \Swagger\Client\Model\ArmorStandData $armor_stand armor_stand
     *
     * @return $this
     */
    public function setArmorStand($armor_stand)
    {
        $this->container['armor_stand'] = $armor_stand;

        return $this;
    }

    /**
     * Gets art
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getArt()
    {
        return $this->container['art'];
    }

    /**
     * Sets art
     *
     * @param \Swagger\Client\Model\CatalogType $art art
     *
     * @return $this
     */
    public function setArt($art)
    {
        $this->container['art'] = $art;

        return $this;
    }

    /**
     * Gets attached
     *
     * @return bool
     */
    public function getAttached()
    {
        return $this->container['attached'];
    }

    /**
     * Sets attached
     *
     * @param bool $attached attached
     *
     * @return $this
     */
    public function setAttached($attached)
    {
        $this->container['attached'] = $attached;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets axis
     *
     * @return string
     */
    public function getAxis()
    {
        return $this->container['axis'];
    }

    /**
     * Sets axis
     *
     * @param string $axis axis
     *
     * @return $this
     */
    public function setAxis($axis)
    {
        $allowedValues = $this->getAxisAllowableValues();
        if (!is_null($axis) && !in_array($axis, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'axis', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['axis'] = $axis;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return \Swagger\Client\Model\BannerData
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param \Swagger\Client\Model\BannerData $banner banner
     *
     * @return $this
     */
    public function setBanner($banner)
    {
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets beacon
     *
     * @return \Swagger\Client\Model\BeaconData
     */
    public function getBeacon()
    {
        return $this->container['beacon'];
    }

    /**
     * Sets beacon
     *
     * @param \Swagger\Client\Model\BeaconData $beacon beacon
     *
     * @return $this
     */
    public function setBeacon($beacon)
    {
        $this->container['beacon'] = $beacon;

        return $this;
    }

    /**
     * Gets big_mushroom
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getBigMushroom()
    {
        return $this->container['big_mushroom'];
    }

    /**
     * Sets big_mushroom
     *
     * @param \Swagger\Client\Model\CatalogType $big_mushroom big_mushroom
     *
     * @return $this
     */
    public function setBigMushroom($big_mushroom)
    {
        $this->container['big_mushroom'] = $big_mushroom;

        return $this;
    }

    /**
     * Gets block
     *
     * @return \Swagger\Client\Model\BlockState
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param \Swagger\Client\Model\BlockState $block block
     *
     * @return $this
     */
    public function setBlock($block)
    {
        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets breathing
     *
     * @return \Swagger\Client\Model\BreathingData
     */
    public function getBreathing()
    {
        return $this->container['breathing'];
    }

    /**
     * Sets breathing
     *
     * @param \Swagger\Client\Model\BreathingData $breathing breathing
     *
     * @return $this
     */
    public function setBreathing($breathing)
    {
        $this->container['breathing'] = $breathing;

        return $this;
    }

    /**
     * Gets breedable
     *
     * @return bool
     */
    public function getBreedable()
    {
        return $this->container['breedable'];
    }

    /**
     * Sets breedable
     *
     * @param bool $breedable breedable
     *
     * @return $this
     */
    public function setBreedable($breedable)
    {
        $this->container['breedable'] = $breedable;

        return $this;
    }

    /**
     * Gets brewing_stand
     *
     * @return \Swagger\Client\Model\BrewingStandData
     */
    public function getBrewingStand()
    {
        return $this->container['brewing_stand'];
    }

    /**
     * Sets brewing_stand
     *
     * @param \Swagger\Client\Model\BrewingStandData $brewing_stand brewing_stand
     *
     * @return $this
     */
    public function setBrewingStand($brewing_stand)
    {
        $this->container['brewing_stand'] = $brewing_stand;

        return $this;
    }

    /**
     * Gets brick
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getBrick()
    {
        return $this->container['brick'];
    }

    /**
     * Sets brick
     *
     * @param \Swagger\Client\Model\CatalogType $brick brick
     *
     * @return $this
     */
    public function setBrick($brick)
    {
        $this->container['brick'] = $brick;

        return $this;
    }

    /**
     * Gets career
     *
     * @return \Swagger\Client\Model\Career
     */
    public function getCareer()
    {
        return $this->container['career'];
    }

    /**
     * Sets career
     *
     * @param \Swagger\Client\Model\Career $career career
     *
     * @return $this
     */
    public function setCareer($career)
    {
        $this->container['career'] = $career;

        return $this;
    }

    /**
     * Gets charged
     *
     * @return bool
     */
    public function getCharged()
    {
        return $this->container['charged'];
    }

    /**
     * Sets charged
     *
     * @param bool $charged charged
     *
     * @return $this
     */
    public function setCharged($charged)
    {
        $this->container['charged'] = $charged;

        return $this;
    }

    /**
     * Gets coal
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getCoal()
    {
        return $this->container['coal'];
    }

    /**
     * Sets coal
     *
     * @param \Swagger\Client\Model\CatalogType $coal coal
     *
     * @return $this
     */
    public function setCoal($coal)
    {
        $this->container['coal'] = $coal;

        return $this;
    }

    /**
     * Gets color
     *
     * @return \Swagger\Client\Model\Color
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param \Swagger\Client\Model\Color $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets command
     *
     * @return \Swagger\Client\Model\CommandData
     */
    public function getCommand()
    {
        return $this->container['command'];
    }

    /**
     * Sets command
     *
     * @param \Swagger\Client\Model\CommandData $command command
     *
     * @return $this
     */
    public function setCommand($command)
    {
        $this->container['command'] = $command;

        return $this;
    }

    /**
     * Gets comparator
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getComparator()
    {
        return $this->container['comparator'];
    }

    /**
     * Sets comparator
     *
     * @param \Swagger\Client\Model\CatalogType $comparator comparator
     *
     * @return $this
     */
    public function setComparator($comparator)
    {
        $this->container['comparator'] = $comparator;

        return $this;
    }

    /**
     * Gets connected_direction
     *
     * @return string[]
     */
    public function getConnectedDirection()
    {
        return $this->container['connected_direction'];
    }

    /**
     * Sets connected_direction
     *
     * @param string[] $connected_direction connected_direction
     *
     * @return $this
     */
    public function setConnectedDirection($connected_direction)
    {
        $allowedValues = $this->getConnectedDirectionAllowableValues();
        if (!is_null($connected_direction) && array_diff($connected_direction, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'connected_direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connected_direction'] = $connected_direction;

        return $this;
    }

    /**
     * Gets cooked_fish
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getCookedFish()
    {
        return $this->container['cooked_fish'];
    }

    /**
     * Sets cooked_fish
     *
     * @param \Swagger\Client\Model\CatalogType $cooked_fish cooked_fish
     *
     * @return $this
     */
    public function setCookedFish($cooked_fish)
    {
        $this->container['cooked_fish'] = $cooked_fish;

        return $this;
    }

    /**
     * Gets cooldown
     *
     * @return int
     */
    public function getCooldown()
    {
        return $this->container['cooldown'];
    }

    /**
     * Sets cooldown
     *
     * @param int $cooldown cooldown
     *
     * @return $this
     */
    public function setCooldown($cooldown)
    {
        $this->container['cooldown'] = $cooldown;

        return $this;
    }

    /**
     * Gets critical_hit
     *
     * @return bool
     */
    public function getCriticalHit()
    {
        return $this->container['critical_hit'];
    }

    /**
     * Sets critical_hit
     *
     * @param bool $critical_hit critical_hit
     *
     * @return $this
     */
    public function setCriticalHit($critical_hit)
    {
        $this->container['critical_hit'] = $critical_hit;

        return $this;
    }

    /**
     * Gets custom_name
     *
     * @return bool
     */
    public function getCustomName()
    {
        return $this->container['custom_name'];
    }

    /**
     * Sets custom_name
     *
     * @param bool $custom_name custom_name
     *
     * @return $this
     */
    public function setCustomName($custom_name)
    {
        $this->container['custom_name'] = $custom_name;

        return $this;
    }

    /**
     * Gets damage
     *
     * @return double
     */
    public function getDamage()
    {
        return $this->container['damage'];
    }

    /**
     * Sets damage
     *
     * @param double $damage damage
     *
     * @return $this
     */
    public function setDamage($damage)
    {
        $this->container['damage'] = $damage;

        return $this;
    }

    /**
     * Gets damageable
     *
     * @return \Swagger\Client\Model\DamageableData
     */
    public function getDamageable()
    {
        return $this->container['damageable'];
    }

    /**
     * Sets damageable
     *
     * @param \Swagger\Client\Model\DamageableData $damageable damageable
     *
     * @return $this
     */
    public function setDamageable($damageable)
    {
        $this->container['damageable'] = $damageable;

        return $this;
    }

    /**
     * Gets decayable
     *
     * @return bool
     */
    public function getDecayable()
    {
        return $this->container['decayable'];
    }

    /**
     * Sets decayable
     *
     * @param bool $decayable decayable
     *
     * @return $this
     */
    public function setDecayable($decayable)
    {
        $this->container['decayable'] = $decayable;

        return $this;
    }

    /**
     * Gets delay
     *
     * @return int
     */
    public function getDelay()
    {
        return $this->container['delay'];
    }

    /**
     * Sets delay
     *
     * @param int $delay delay
     *
     * @return $this
     */
    public function setDelay($delay)
    {
        $this->container['delay'] = $delay;

        return $this;
    }

    /**
     * Gets despawn_delay
     *
     * @return \Swagger\Client\Model\DespawnDelayData
     */
    public function getDespawnDelay()
    {
        return $this->container['despawn_delay'];
    }

    /**
     * Sets despawn_delay
     *
     * @param \Swagger\Client\Model\DespawnDelayData $despawn_delay despawn_delay
     *
     * @return $this
     */
    public function setDespawnDelay($despawn_delay)
    {
        $this->container['despawn_delay'] = $despawn_delay;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction direction
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets dirt
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getDirt()
    {
        return $this->container['dirt'];
    }

    /**
     * Sets dirt
     *
     * @param \Swagger\Client\Model\CatalogType $dirt dirt
     *
     * @return $this
     */
    public function setDirt($dirt)
    {
        $this->container['dirt'] = $dirt;

        return $this;
    }

    /**
     * Gets disarmed
     *
     * @return bool
     */
    public function getDisarmed()
    {
        return $this->container['disarmed'];
    }

    /**
     * Sets disarmed
     *
     * @param bool $disarmed disarmed
     *
     * @return $this
     */
    public function setDisarmed($disarmed)
    {
        $this->container['disarmed'] = $disarmed;

        return $this;
    }

    /**
     * Gets disguised_block
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getDisguisedBlock()
    {
        return $this->container['disguised_block'];
    }

    /**
     * Sets disguised_block
     *
     * @param \Swagger\Client\Model\CatalogType $disguised_block disguised_block
     *
     * @return $this
     */
    public function setDisguisedBlock($disguised_block)
    {
        $this->container['disguised_block'] = $disguised_block;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets dominant_hand
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getDominantHand()
    {
        return $this->container['dominant_hand'];
    }

    /**
     * Sets dominant_hand
     *
     * @param \Swagger\Client\Model\CatalogType $dominant_hand dominant_hand
     *
     * @return $this
     */
    public function setDominantHand($dominant_hand)
    {
        $this->container['dominant_hand'] = $dominant_hand;

        return $this;
    }

    /**
     * Gets double_plant
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getDoublePlant()
    {
        return $this->container['double_plant'];
    }

    /**
     * Sets double_plant
     *
     * @param \Swagger\Client\Model\CatalogType $double_plant double_plant
     *
     * @return $this
     */
    public function setDoublePlant($double_plant)
    {
        $this->container['double_plant'] = $double_plant;

        return $this;
    }

    /**
     * Gets drops
     *
     * @return bool
     */
    public function getDrops()
    {
        return $this->container['drops'];
    }

    /**
     * Sets drops
     *
     * @param bool $drops drops
     *
     * @return $this
     */
    public function setDrops($drops)
    {
        $this->container['drops'] = $drops;

        return $this;
    }

    /**
     * Gets durability
     *
     * @return \Swagger\Client\Model\DurabilityData
     */
    public function getDurability()
    {
        return $this->container['durability'];
    }

    /**
     * Sets durability
     *
     * @param \Swagger\Client\Model\DurabilityData $durability durability
     *
     * @return $this
     */
    public function setDurability($durability)
    {
        $this->container['durability'] = $durability;

        return $this;
    }

    /**
     * Gets dye
     *
     * @return \Swagger\Client\Model\DyeColor
     */
    public function getDye()
    {
        return $this->container['dye'];
    }

    /**
     * Sets dye
     *
     * @param \Swagger\Client\Model\DyeColor $dye dye
     *
     * @return $this
     */
    public function setDye($dye)
    {
        $this->container['dye'] = $dye;

        return $this;
    }

    /**
     * Gets enchantments
     *
     * @return \Swagger\Client\Model\Enchantment[]
     */
    public function getEnchantments()
    {
        return $this->container['enchantments'];
    }

    /**
     * Sets enchantments
     *
     * @param \Swagger\Client\Model\Enchantment[] $enchantments enchantments
     *
     * @return $this
     */
    public function setEnchantments($enchantments)
    {
        $this->container['enchantments'] = $enchantments;

        return $this;
    }

    /**
     * Gets end_gateway
     *
     * @return \Swagger\Client\Model\EndGatewayData
     */
    public function getEndGateway()
    {
        return $this->container['end_gateway'];
    }

    /**
     * Sets end_gateway
     *
     * @param \Swagger\Client\Model\EndGatewayData $end_gateway end_gateway
     *
     * @return $this
     */
    public function setEndGateway($end_gateway)
    {
        $this->container['end_gateway'] = $end_gateway;

        return $this;
    }

    /**
     * Gets exp_orb
     *
     * @return int
     */
    public function getExpOrb()
    {
        return $this->container['exp_orb'];
    }

    /**
     * Sets exp_orb
     *
     * @param int $exp_orb exp_orb
     *
     * @return $this
     */
    public function setExpOrb($exp_orb)
    {
        $this->container['exp_orb'] = $exp_orb;

        return $this;
    }

    /**
     * Gets experience
     *
     * @return \Swagger\Client\Model\ExperienceHolderData
     */
    public function getExperience()
    {
        return $this->container['experience'];
    }

    /**
     * Sets experience
     *
     * @param \Swagger\Client\Model\ExperienceHolderData $experience experience
     *
     * @return $this
     */
    public function setExperience($experience)
    {
        $this->container['experience'] = $experience;

        return $this;
    }

    /**
     * Gets expire_ticks
     *
     * @return int
     */
    public function getExpireTicks()
    {
        return $this->container['expire_ticks'];
    }

    /**
     * Sets expire_ticks
     *
     * @param int $expire_ticks expire_ticks
     *
     * @return $this
     */
    public function setExpireTicks($expire_ticks)
    {
        $this->container['expire_ticks'] = $expire_ticks;

        return $this;
    }

    /**
     * Gets explosion_radius
     *
     * @return int
     */
    public function getExplosionRadius()
    {
        return $this->container['explosion_radius'];
    }

    /**
     * Sets explosion_radius
     *
     * @param int $explosion_radius explosion_radius
     *
     * @return $this
     */
    public function setExplosionRadius($explosion_radius)
    {
        $this->container['explosion_radius'] = $explosion_radius;

        return $this;
    }

    /**
     * Gets extended
     *
     * @return bool
     */
    public function getExtended()
    {
        return $this->container['extended'];
    }

    /**
     * Sets extended
     *
     * @param bool $extended extended
     *
     * @return $this
     */
    public function setExtended($extended)
    {
        $this->container['extended'] = $extended;

        return $this;
    }

    /**
     * Gets fall_distance
     *
     * @return float
     */
    public function getFallDistance()
    {
        return $this->container['fall_distance'];
    }

    /**
     * Sets fall_distance
     *
     * @param float $fall_distance fall_distance
     *
     * @return $this
     */
    public function setFallDistance($fall_distance)
    {
        $this->container['fall_distance'] = $fall_distance;

        return $this;
    }

    /**
     * Gets falling_block
     *
     * @return \Swagger\Client\Model\FallingBlockData
     */
    public function getFallingBlock()
    {
        return $this->container['falling_block'];
    }

    /**
     * Sets falling_block
     *
     * @param \Swagger\Client\Model\FallingBlockData $falling_block falling_block
     *
     * @return $this
     */
    public function setFallingBlock($falling_block)
    {
        $this->container['falling_block'] = $falling_block;

        return $this;
    }

    /**
     * Gets filled
     *
     * @return bool
     */
    public function getFilled()
    {
        return $this->container['filled'];
    }

    /**
     * Sets filled
     *
     * @param bool $filled filled
     *
     * @return $this
     */
    public function setFilled($filled)
    {
        $this->container['filled'] = $filled;

        return $this;
    }

    /**
     * Gets firework_effects
     *
     * @return \Swagger\Client\Model\FireworkEffect[]
     */
    public function getFireworkEffects()
    {
        return $this->container['firework_effects'];
    }

    /**
     * Sets firework_effects
     *
     * @param \Swagger\Client\Model\FireworkEffect[] $firework_effects firework_effects
     *
     * @return $this
     */
    public function setFireworkEffects($firework_effects)
    {
        $this->container['firework_effects'] = $firework_effects;

        return $this;
    }

    /**
     * Gets firework_rocket
     *
     * @return \Swagger\Client\Model\FireworkRocketData
     */
    public function getFireworkRocket()
    {
        return $this->container['firework_rocket'];
    }

    /**
     * Sets firework_rocket
     *
     * @param \Swagger\Client\Model\FireworkRocketData $firework_rocket firework_rocket
     *
     * @return $this
     */
    public function setFireworkRocket($firework_rocket)
    {
        $this->container['firework_rocket'] = $firework_rocket;

        return $this;
    }

    /**
     * Gets fish
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getFish()
    {
        return $this->container['fish'];
    }

    /**
     * Sets fish
     *
     * @param \Swagger\Client\Model\CatalogType $fish fish
     *
     * @return $this
     */
    public function setFish($fish)
    {
        $this->container['fish'] = $fish;

        return $this;
    }

    /**
     * Gets flammable
     *
     * @return bool
     */
    public function getFlammable()
    {
        return $this->container['flammable'];
    }

    /**
     * Sets flammable
     *
     * @param bool $flammable flammable
     *
     * @return $this
     */
    public function setFlammable($flammable)
    {
        $this->container['flammable'] = $flammable;

        return $this;
    }

    /**
     * Gets fluid
     *
     * @return \Swagger\Client\Model\FluidStack
     */
    public function getFluid()
    {
        return $this->container['fluid'];
    }

    /**
     * Sets fluid
     *
     * @param \Swagger\Client\Model\FluidStack $fluid fluid
     *
     * @return $this
     */
    public function setFluid($fluid)
    {
        $this->container['fluid'] = $fluid;

        return $this;
    }

    /**
     * Gets fluid_level
     *
     * @return int
     */
    public function getFluidLevel()
    {
        return $this->container['fluid_level'];
    }

    /**
     * Sets fluid_level
     *
     * @param int $fluid_level fluid_level
     *
     * @return $this
     */
    public function setFluidLevel($fluid_level)
    {
        $this->container['fluid_level'] = $fluid_level;

        return $this;
    }

    /**
     * Gets fluid_tanks
     *
     * @return map[string,\Swagger\Client\Model\FluidStack[]]
     */
    public function getFluidTanks()
    {
        return $this->container['fluid_tanks'];
    }

    /**
     * Sets fluid_tanks
     *
     * @param map[string,\Swagger\Client\Model\FluidStack[]] $fluid_tanks fluid_tanks
     *
     * @return $this
     */
    public function setFluidTanks($fluid_tanks)
    {
        $this->container['fluid_tanks'] = $fluid_tanks;

        return $this;
    }

    /**
     * Gets flying
     *
     * @return bool
     */
    public function getFlying()
    {
        return $this->container['flying'];
    }

    /**
     * Sets flying
     *
     * @param bool $flying flying
     *
     * @return $this
     */
    public function setFlying($flying)
    {
        $this->container['flying'] = $flying;

        return $this;
    }

    /**
     * Gets flying_ability
     *
     * @return bool
     */
    public function getFlyingAbility()
    {
        return $this->container['flying_ability'];
    }

    /**
     * Sets flying_ability
     *
     * @param bool $flying_ability flying_ability
     *
     * @return $this
     */
    public function setFlyingAbility($flying_ability)
    {
        $this->container['flying_ability'] = $flying_ability;

        return $this;
    }

    /**
     * Gets food
     *
     * @return \Swagger\Client\Model\FoodData
     */
    public function getFood()
    {
        return $this->container['food'];
    }

    /**
     * Sets food
     *
     * @param \Swagger\Client\Model\FoodData $food food
     *
     * @return $this
     */
    public function setFood($food)
    {
        $this->container['food'] = $food;

        return $this;
    }

    /**
     * Gets furnace
     *
     * @return \Swagger\Client\Model\FurnaceData
     */
    public function getFurnace()
    {
        return $this->container['furnace'];
    }

    /**
     * Sets furnace
     *
     * @param \Swagger\Client\Model\FurnaceData $furnace furnace
     *
     * @return $this
     */
    public function setFurnace($furnace)
    {
        $this->container['furnace'] = $furnace;

        return $this;
    }

    /**
     * Gets fuse
     *
     * @return \Swagger\Client\Model\FuseData
     */
    public function getFuse()
    {
        return $this->container['fuse'];
    }

    /**
     * Sets fuse
     *
     * @param \Swagger\Client\Model\FuseData $fuse fuse
     *
     * @return $this
     */
    public function setFuse($fuse)
    {
        $this->container['fuse'] = $fuse;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return \Swagger\Client\Model\GameMode
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param \Swagger\Client\Model\GameMode $game_mode game_mode
     *
     * @return $this
     */
    public function setGameMode($game_mode)
    {
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets generation
     *
     * @return int
     */
    public function getGeneration()
    {
        return $this->container['generation'];
    }

    /**
     * Sets generation
     *
     * @param int $generation generation
     *
     * @return $this
     */
    public function setGeneration($generation)
    {
        $this->container['generation'] = $generation;

        return $this;
    }

    /**
     * Gets glowing
     *
     * @return bool
     */
    public function getGlowing()
    {
        return $this->container['glowing'];
    }

    /**
     * Sets glowing
     *
     * @param bool $glowing glowing
     *
     * @return $this
     */
    public function setGlowing($glowing)
    {
        $this->container['glowing'] = $glowing;

        return $this;
    }

    /**
     * Gets golden_apple
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getGoldenApple()
    {
        return $this->container['golden_apple'];
    }

    /**
     * Sets golden_apple
     *
     * @param \Swagger\Client\Model\CatalogType $golden_apple golden_apple
     *
     * @return $this
     */
    public function setGoldenApple($golden_apple)
    {
        $this->container['golden_apple'] = $golden_apple;

        return $this;
    }

    /**
     * Gets griefs
     *
     * @return bool
     */
    public function getGriefs()
    {
        return $this->container['griefs'];
    }

    /**
     * Sets griefs
     *
     * @param bool $griefs griefs
     *
     * @return $this
     */
    public function setGriefs($griefs)
    {
        $this->container['griefs'] = $griefs;

        return $this;
    }

    /**
     * Gets growth
     *
     * @return \Swagger\Client\Model\GrowthData
     */
    public function getGrowth()
    {
        return $this->container['growth'];
    }

    /**
     * Sets growth
     *
     * @param \Swagger\Client\Model\GrowthData $growth growth
     *
     * @return $this
     */
    public function setGrowth($growth)
    {
        $this->container['growth'] = $growth;

        return $this;
    }

    /**
     * Gets health
     *
     * @return \Swagger\Client\Model\HealthData
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param \Swagger\Client\Model\HealthData $health health
     *
     * @return $this
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets hide
     *
     * @return \Swagger\Client\Model\HideData
     */
    public function getHide()
    {
        return $this->container['hide'];
    }

    /**
     * Sets hide
     *
     * @param \Swagger\Client\Model\HideData $hide hide
     *
     * @return $this
     */
    public function setHide($hide)
    {
        $this->container['hide'] = $hide;

        return $this;
    }

    /**
     * Gets hinge
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getHinge()
    {
        return $this->container['hinge'];
    }

    /**
     * Sets hinge
     *
     * @param \Swagger\Client\Model\CatalogType $hinge hinge
     *
     * @return $this
     */
    public function setHinge($hinge)
    {
        $this->container['hinge'] = $hinge;

        return $this;
    }

    /**
     * Gets horse
     *
     * @return \Swagger\Client\Model\HorseData
     */
    public function getHorse()
    {
        return $this->container['horse'];
    }

    /**
     * Sets horse
     *
     * @param \Swagger\Client\Model\HorseData $horse horse
     *
     * @return $this
     */
    public function setHorse($horse)
    {
        $this->container['horse'] = $horse;

        return $this;
    }

    /**
     * Gets igniteable
     *
     * @return \Swagger\Client\Model\IgniteableData
     */
    public function getIgniteable()
    {
        return $this->container['igniteable'];
    }

    /**
     * Sets igniteable
     *
     * @param \Swagger\Client\Model\IgniteableData $igniteable igniteable
     *
     * @return $this
     */
    public function setIgniteable($igniteable)
    {
        $this->container['igniteable'] = $igniteable;

        return $this;
    }

    /**
     * Gets in_wall
     *
     * @return bool
     */
    public function getInWall()
    {
        return $this->container['in_wall'];
    }

    /**
     * Sets in_wall
     *
     * @param bool $in_wall in_wall
     *
     * @return $this
     */
    public function setInWall($in_wall)
    {
        $this->container['in_wall'] = $in_wall;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return \Swagger\Client\Model\Inventory
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param \Swagger\Client\Model\Inventory $inventory inventory
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets invisibility
     *
     * @return \Swagger\Client\Model\InvisibilityData
     */
    public function getInvisibility()
    {
        return $this->container['invisibility'];
    }

    /**
     * Sets invisibility
     *
     * @param \Swagger\Client\Model\InvisibilityData $invisibility invisibility
     *
     * @return $this
     */
    public function setInvisibility($invisibility)
    {
        $this->container['invisibility'] = $invisibility;

        return $this;
    }

    /**
     * Gets invulnerability
     *
     * @return \Swagger\Client\Model\InvulnerabilityData
     */
    public function getInvulnerability()
    {
        return $this->container['invulnerability'];
    }

    /**
     * Sets invulnerability
     *
     * @param \Swagger\Client\Model\InvulnerabilityData $invulnerability invulnerability
     *
     * @return $this
     */
    public function setInvulnerability($invulnerability)
    {
        $this->container['invulnerability'] = $invulnerability;

        return $this;
    }

    /**
     * Gets joined
     *
     * @return \Swagger\Client\Model\JoinData
     */
    public function getJoined()
    {
        return $this->container['joined'];
    }

    /**
     * Sets joined
     *
     * @param \Swagger\Client\Model\JoinData $joined joined
     *
     * @return $this
     */
    public function setJoined($joined)
    {
        $this->container['joined'] = $joined;

        return $this;
    }

    /**
     * Gets knockback
     *
     * @return int
     */
    public function getKnockback()
    {
        return $this->container['knockback'];
    }

    /**
     * Sets knockback
     *
     * @param int $knockback knockback
     *
     * @return $this
     */
    public function setKnockback($knockback)
    {
        $this->container['knockback'] = $knockback;

        return $this;
    }

    /**
     * Gets layer
     *
     * @return int
     */
    public function getLayer()
    {
        return $this->container['layer'];
    }

    /**
     * Sets layer
     *
     * @param int $layer layer
     *
     * @return $this
     */
    public function setLayer($layer)
    {
        $this->container['layer'] = $layer;

        return $this;
    }

    /**
     * Gets leash
     *
     * @return \Swagger\Client\Model\LeashData
     */
    public function getLeash()
    {
        return $this->container['leash'];
    }

    /**
     * Sets leash
     *
     * @param \Swagger\Client\Model\LeashData $leash leash
     *
     * @return $this
     */
    public function setLeash($leash)
    {
        $this->container['leash'] = $leash;

        return $this;
    }

    /**
     * Gets lock_token
     *
     * @return string
     */
    public function getLockToken()
    {
        return $this->container['lock_token'];
    }

    /**
     * Sets lock_token
     *
     * @param string $lock_token lock_token
     *
     * @return $this
     */
    public function setLockToken($lock_token)
    {
        $this->container['lock_token'] = $lock_token;

        return $this;
    }

    /**
     * Gets log_axis
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getLogAxis()
    {
        return $this->container['log_axis'];
    }

    /**
     * Sets log_axis
     *
     * @param \Swagger\Client\Model\CatalogType $log_axis log_axis
     *
     * @return $this
     */
    public function setLogAxis($log_axis)
    {
        $this->container['log_axis'] = $log_axis;

        return $this;
    }

    /**
     * Gets lore
     *
     * @return string[]
     */
    public function getLore()
    {
        return $this->container['lore'];
    }

    /**
     * Sets lore
     *
     * @param string[] $lore lore
     *
     * @return $this
     */
    public function setLore($lore)
    {
        $this->container['lore'] = $lore;

        return $this;
    }

    /**
     * Gets minecart_block
     *
     * @return \Swagger\Client\Model\MinecartBlockData
     */
    public function getMinecartBlock()
    {
        return $this->container['minecart_block'];
    }

    /**
     * Sets minecart_block
     *
     * @param \Swagger\Client\Model\MinecartBlockData $minecart_block minecart_block
     *
     * @return $this
     */
    public function setMinecartBlock($minecart_block)
    {
        $this->container['minecart_block'] = $minecart_block;

        return $this;
    }

    /**
     * Gets mob_spawner
     *
     * @return \Swagger\Client\Model\MobSpawnerData
     */
    public function getMobSpawner()
    {
        return $this->container['mob_spawner'];
    }

    /**
     * Sets mob_spawner
     *
     * @param \Swagger\Client\Model\MobSpawnerData $mob_spawner mob_spawner
     *
     * @return $this
     */
    public function setMobSpawner($mob_spawner)
    {
        $this->container['mob_spawner'] = $mob_spawner;

        return $this;
    }

    /**
     * Gets moisture
     *
     * @return int
     */
    public function getMoisture()
    {
        return $this->container['moisture'];
    }

    /**
     * Sets moisture
     *
     * @param int $moisture moisture
     *
     * @return $this
     */
    public function setMoisture($moisture)
    {
        $this->container['moisture'] = $moisture;

        return $this;
    }

    /**
     * Gets note
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param \Swagger\Client\Model\CatalogType $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets occupied
     *
     * @return bool
     */
    public function getOccupied()
    {
        return $this->container['occupied'];
    }

    /**
     * Sets occupied
     *
     * @param bool $occupied occupied
     *
     * @return $this
     */
    public function setOccupied($occupied)
    {
        $this->container['occupied'] = $occupied;

        return $this;
    }

    /**
     * Gets ocelot
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getOcelot()
    {
        return $this->container['ocelot'];
    }

    /**
     * Sets ocelot
     *
     * @param \Swagger\Client\Model\CatalogType $ocelot ocelot
     *
     * @return $this
     */
    public function setOcelot($ocelot)
    {
        $this->container['ocelot'] = $ocelot;

        return $this;
    }

    /**
     * Gets open
     *
     * @return bool
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param bool $open open
     *
     * @return $this
     */
    public function setOpen($open)
    {
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return string[]
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param string[] $pages pages
     *
     * @return $this
     */
    public function setPages($pages)
    {
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets passengers
     *
     * @return string[]
     */
    public function getPassengers()
    {
        return $this->container['passengers'];
    }

    /**
     * Sets passengers
     *
     * @param string[] $passengers passengers
     *
     * @return $this
     */
    public function setPassengers($passengers)
    {
        $this->container['passengers'] = $passengers;

        return $this;
    }

    /**
     * Gets persists
     *
     * @return bool
     */
    public function getPersists()
    {
        return $this->container['persists'];
    }

    /**
     * Sets persists
     *
     * @param bool $persists persists
     *
     * @return $this
     */
    public function setPersists($persists)
    {
        $this->container['persists'] = $persists;

        return $this;
    }

    /**
     * Gets pickup_delay
     *
     * @return \Swagger\Client\Model\PickupDelayData
     */
    public function getPickupDelay()
    {
        return $this->container['pickup_delay'];
    }

    /**
     * Sets pickup_delay
     *
     * @param \Swagger\Client\Model\PickupDelayData $pickup_delay pickup_delay
     *
     * @return $this
     */
    public function setPickupDelay($pickup_delay)
    {
        $this->container['pickup_delay'] = $pickup_delay;

        return $this;
    }

    /**
     * Gets pickup_rule
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getPickupRule()
    {
        return $this->container['pickup_rule'];
    }

    /**
     * Sets pickup_rule
     *
     * @param \Swagger\Client\Model\CatalogType $pickup_rule pickup_rule
     *
     * @return $this
     */
    public function setPickupRule($pickup_rule)
    {
        $this->container['pickup_rule'] = $pickup_rule;

        return $this;
    }

    /**
     * Gets pig_saddle
     *
     * @return bool
     */
    public function getPigSaddle()
    {
        return $this->container['pig_saddle'];
    }

    /**
     * Sets pig_saddle
     *
     * @param bool $pig_saddle pig_saddle
     *
     * @return $this
     */
    public function setPigSaddle($pig_saddle)
    {
        $this->container['pig_saddle'] = $pig_saddle;

        return $this;
    }

    /**
     * Gets piston
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getPiston()
    {
        return $this->container['piston'];
    }

    /**
     * Sets piston
     *
     * @param \Swagger\Client\Model\CatalogType $piston piston
     *
     * @return $this
     */
    public function setPiston($piston)
    {
        $this->container['piston'] = $piston;

        return $this;
    }

    /**
     * Gets placeable_on
     *
     * @return \Swagger\Client\Model\CatalogType[]
     */
    public function getPlaceableOn()
    {
        return $this->container['placeable_on'];
    }

    /**
     * Sets placeable_on
     *
     * @param \Swagger\Client\Model\CatalogType[] $placeable_on placeable_on
     *
     * @return $this
     */
    public function setPlaceableOn($placeable_on)
    {
        $this->container['placeable_on'] = $placeable_on;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param \Swagger\Client\Model\CatalogType $plant plant
     *
     * @return $this
     */
    public function setPlant($plant)
    {
        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets player_created
     *
     * @return bool
     */
    public function getPlayerCreated()
    {
        return $this->container['player_created'];
    }

    /**
     * Sets player_created
     *
     * @param bool $player_created player_created
     *
     * @return $this
     */
    public function setPlayerCreated($player_created)
    {
        $this->container['player_created'] = $player_created;

        return $this;
    }

    /**
     * Gets playing
     *
     * @return bool
     */
    public function getPlaying()
    {
        return $this->container['playing'];
    }

    /**
     * Sets playing
     *
     * @param bool $playing playing
     *
     * @return $this
     */
    public function setPlaying($playing)
    {
        $this->container['playing'] = $playing;

        return $this;
    }

    /**
     * Gets portion
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getPortion()
    {
        return $this->container['portion'];
    }

    /**
     * Sets portion
     *
     * @param \Swagger\Client\Model\CatalogType $portion portion
     *
     * @return $this
     */
    public function setPortion($portion)
    {
        $this->container['portion'] = $portion;

        return $this;
    }

    /**
     * Gets potion_effects
     *
     * @return \Swagger\Client\Model\PotionEffect[]
     */
    public function getPotionEffects()
    {
        return $this->container['potion_effects'];
    }

    /**
     * Sets potion_effects
     *
     * @param \Swagger\Client\Model\PotionEffect[] $potion_effects potion_effects
     *
     * @return $this
     */
    public function setPotionEffects($potion_effects)
    {
        $this->container['potion_effects'] = $potion_effects;

        return $this;
    }

    /**
     * Gets powered
     *
     * @return bool
     */
    public function getPowered()
    {
        return $this->container['powered'];
    }

    /**
     * Sets powered
     *
     * @param bool $powered powered
     *
     * @return $this
     */
    public function setPowered($powered)
    {
        $this->container['powered'] = $powered;

        return $this;
    }

    /**
     * Gets prismarine
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getPrismarine()
    {
        return $this->container['prismarine'];
    }

    /**
     * Sets prismarine
     *
     * @param \Swagger\Client\Model\CatalogType $prismarine prismarine
     *
     * @return $this
     */
    public function setPrismarine($prismarine)
    {
        $this->container['prismarine'] = $prismarine;

        return $this;
    }

    /**
     * Gets quartz
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getQuartz()
    {
        return $this->container['quartz'];
    }

    /**
     * Sets quartz
     *
     * @param \Swagger\Client\Model\CatalogType $quartz quartz
     *
     * @return $this
     */
    public function setQuartz($quartz)
    {
        $this->container['quartz'] = $quartz;

        return $this;
    }

    /**
     * Gets rabbit
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getRabbit()
    {
        return $this->container['rabbit'];
    }

    /**
     * Sets rabbit
     *
     * @param \Swagger\Client\Model\CatalogType $rabbit rabbit
     *
     * @return $this
     */
    public function setRabbit($rabbit)
    {
        $this->container['rabbit'] = $rabbit;

        return $this;
    }

    /**
     * Gets rail_direction
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getRailDirection()
    {
        return $this->container['rail_direction'];
    }

    /**
     * Sets rail_direction
     *
     * @param \Swagger\Client\Model\CatalogType $rail_direction rail_direction
     *
     * @return $this
     */
    public function setRailDirection($rail_direction)
    {
        $this->container['rail_direction'] = $rail_direction;

        return $this;
    }

    /**
     * Gets redstone_power
     *
     * @return int
     */
    public function getRedstonePower()
    {
        return $this->container['redstone_power'];
    }

    /**
     * Sets redstone_power
     *
     * @param int $redstone_power redstone_power
     *
     * @return $this
     */
    public function setRedstonePower($redstone_power)
    {
        $this->container['redstone_power'] = $redstone_power;

        return $this;
    }

    /**
     * Gets represented_item
     *
     * @return \Swagger\Client\Model\ItemStack
     */
    public function getRepresentedItem()
    {
        return $this->container['represented_item'];
    }

    /**
     * Sets represented_item
     *
     * @param \Swagger\Client\Model\ItemStack $represented_item represented_item
     *
     * @return $this
     */
    public function setRepresentedItem($represented_item)
    {
        $this->container['represented_item'] = $represented_item;

        return $this;
    }

    /**
     * Gets represented_player
     *
     * @return string
     */
    public function getRepresentedPlayer()
    {
        return $this->container['represented_player'];
    }

    /**
     * Sets represented_player
     *
     * @param string $represented_player represented_player
     *
     * @return $this
     */
    public function setRepresentedPlayer($represented_player)
    {
        $this->container['represented_player'] = $represented_player;

        return $this;
    }

    /**
     * Gets respawn_locations
     *
     * @return map[string,\Swagger\Client\Model\Location]
     */
    public function getRespawnLocations()
    {
        return $this->container['respawn_locations'];
    }

    /**
     * Sets respawn_locations
     *
     * @param map[string,\Swagger\Client\Model\Location] $respawn_locations respawn_locations
     *
     * @return $this
     */
    public function setRespawnLocations($respawn_locations)
    {
        $this->container['respawn_locations'] = $respawn_locations;

        return $this;
    }

    /**
     * Gets sand
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getSand()
    {
        return $this->container['sand'];
    }

    /**
     * Sets sand
     *
     * @param \Swagger\Client\Model\CatalogType $sand sand
     *
     * @return $this
     */
    public function setSand($sand)
    {
        $this->container['sand'] = $sand;

        return $this;
    }

    /**
     * Gets sand_stone
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getSandStone()
    {
        return $this->container['sand_stone'];
    }

    /**
     * Sets sand_stone
     *
     * @param \Swagger\Client\Model\CatalogType $sand_stone sand_stone
     *
     * @return $this
     */
    public function setSandStone($sand_stone)
    {
        $this->container['sand_stone'] = $sand_stone;

        return $this;
    }

    /**
     * Gets screaming
     *
     * @return bool
     */
    public function getScreaming()
    {
        return $this->container['screaming'];
    }

    /**
     * Sets screaming
     *
     * @param bool $screaming screaming
     *
     * @return $this
     */
    public function setScreaming($screaming)
    {
        $this->container['screaming'] = $screaming;

        return $this;
    }

    /**
     * Gets seamless
     *
     * @return bool
     */
    public function getSeamless()
    {
        return $this->container['seamless'];
    }

    /**
     * Sets seamless
     *
     * @param bool $seamless seamless
     *
     * @return $this
     */
    public function setSeamless($seamless)
    {
        $this->container['seamless'] = $seamless;

        return $this;
    }

    /**
     * Gets shatters
     *
     * @return bool
     */
    public function getShatters()
    {
        return $this->container['shatters'];
    }

    /**
     * Sets shatters
     *
     * @param bool $shatters shatters
     *
     * @return $this
     */
    public function setShatters($shatters)
    {
        $this->container['shatters'] = $shatters;

        return $this;
    }

    /**
     * Gets sheared
     *
     * @return bool
     */
    public function getSheared()
    {
        return $this->container['sheared'];
    }

    /**
     * Sets sheared
     *
     * @param bool $sheared sheared
     *
     * @return $this
     */
    public function setSheared($sheared)
    {
        $this->container['sheared'] = $sheared;

        return $this;
    }

    /**
     * Gets shrub
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getShrub()
    {
        return $this->container['shrub'];
    }

    /**
     * Sets shrub
     *
     * @param \Swagger\Client\Model\CatalogType $shrub shrub
     *
     * @return $this
     */
    public function setShrub($shrub)
    {
        $this->container['shrub'] = $shrub;

        return $this;
    }

    /**
     * Gets sign
     *
     * @return string[]
     */
    public function getSign()
    {
        return $this->container['sign'];
    }

    /**
     * Sets sign
     *
     * @param string[] $sign sign
     *
     * @return $this
     */
    public function setSign($sign)
    {
        $this->container['sign'] = $sign;

        return $this;
    }

    /**
     * Gets silent
     *
     * @return bool
     */
    public function getSilent()
    {
        return $this->container['silent'];
    }

    /**
     * Sets silent
     *
     * @param bool $silent silent
     *
     * @return $this
     */
    public function setSilent($silent)
    {
        $this->container['silent'] = $silent;

        return $this;
    }

    /**
     * Gets sitting
     *
     * @return bool
     */
    public function getSitting()
    {
        return $this->container['sitting'];
    }

    /**
     * Sets sitting
     *
     * @param bool $sitting sitting
     *
     * @return $this
     */
    public function setSitting($sitting)
    {
        $this->container['sitting'] = $sitting;

        return $this;
    }

    /**
     * Gets skin
     *
     * @return string
     */
    public function getSkin()
    {
        return $this->container['skin'];
    }

    /**
     * Sets skin
     *
     * @param string $skin skin
     *
     * @return $this
     */
    public function setSkin($skin)
    {
        $this->container['skin'] = $skin;

        return $this;
    }

    /**
     * Gets skull
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getSkull()
    {
        return $this->container['skull'];
    }

    /**
     * Sets skull
     *
     * @param \Swagger\Client\Model\CatalogType $skull skull
     *
     * @return $this
     */
    public function setSkull($skull)
    {
        $this->container['skull'] = $skull;

        return $this;
    }

    /**
     * Gets slab
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getSlab()
    {
        return $this->container['slab'];
    }

    /**
     * Sets slab
     *
     * @param \Swagger\Client\Model\CatalogType $slab slab
     *
     * @return $this
     */
    public function setSlab($slab)
    {
        $this->container['slab'] = $slab;

        return $this;
    }

    /**
     * Gets sleeping
     *
     * @return bool
     */
    public function getSleeping()
    {
        return $this->container['sleeping'];
    }

    /**
     * Sets sleeping
     *
     * @param bool $sleeping sleeping
     *
     * @return $this
     */
    public function setSleeping($sleeping)
    {
        $this->container['sleeping'] = $sleeping;

        return $this;
    }

    /**
     * Gets slime
     *
     * @return \Swagger\Client\Model\SlimeData
     */
    public function getSlime()
    {
        return $this->container['slime'];
    }

    /**
     * Sets slime
     *
     * @param \Swagger\Client\Model\SlimeData $slime slime
     *
     * @return $this
     */
    public function setSlime($slime)
    {
        $this->container['slime'] = $slime;

        return $this;
    }

    /**
     * Gets sneaking
     *
     * @return bool
     */
    public function getSneaking()
    {
        return $this->container['sneaking'];
    }

    /**
     * Sets sneaking
     *
     * @param bool $sneaking sneaking
     *
     * @return $this
     */
    public function setSneaking($sneaking)
    {
        $this->container['sneaking'] = $sneaking;

        return $this;
    }

    /**
     * Gets snow
     *
     * @return bool
     */
    public function getSnow()
    {
        return $this->container['snow'];
    }

    /**
     * Sets snow
     *
     * @param bool $snow snow
     *
     * @return $this
     */
    public function setSnow($snow)
    {
        $this->container['snow'] = $snow;

        return $this;
    }

    /**
     * Gets spawn
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getSpawn()
    {
        return $this->container['spawn'];
    }

    /**
     * Sets spawn
     *
     * @param \Swagger\Client\Model\CatalogType $spawn spawn
     *
     * @return $this
     */
    public function setSpawn($spawn)
    {
        $this->container['spawn'] = $spawn;

        return $this;
    }

    /**
     * Gets sprinting
     *
     * @return bool
     */
    public function getSprinting()
    {
        return $this->container['sprinting'];
    }

    /**
     * Sets sprinting
     *
     * @param bool $sprinting sprinting
     *
     * @return $this
     */
    public function setSprinting($sprinting)
    {
        $this->container['sprinting'] = $sprinting;

        return $this;
    }

    /**
     * Gets stair_shape
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getStairShape()
    {
        return $this->container['stair_shape'];
    }

    /**
     * Sets stair_shape
     *
     * @param \Swagger\Client\Model\CatalogType $stair_shape stair_shape
     *
     * @return $this
     */
    public function setStairShape($stair_shape)
    {
        $this->container['stair_shape'] = $stair_shape;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \Swagger\Client\Model\Stat[]
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \Swagger\Client\Model\Stat[] $statistics statistics
     *
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets stone
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getStone()
    {
        return $this->container['stone'];
    }

    /**
     * Sets stone
     *
     * @param \Swagger\Client\Model\CatalogType $stone stone
     *
     * @return $this
     */
    public function setStone($stone)
    {
        $this->container['stone'] = $stone;

        return $this;
    }

    /**
     * Gets stored_enchantments
     *
     * @return \Swagger\Client\Model\Enchantment[]
     */
    public function getStoredEnchantments()
    {
        return $this->container['stored_enchantments'];
    }

    /**
     * Sets stored_enchantments
     *
     * @param \Swagger\Client\Model\Enchantment[] $stored_enchantments stored_enchantments
     *
     * @return $this
     */
    public function setStoredEnchantments($stored_enchantments)
    {
        $this->container['stored_enchantments'] = $stored_enchantments;

        return $this;
    }

    /**
     * Gets structure
     *
     * @return \Swagger\Client\Model\StructureData
     */
    public function getStructure()
    {
        return $this->container['structure'];
    }

    /**
     * Sets structure
     *
     * @param \Swagger\Client\Model\StructureData $structure structure
     *
     * @return $this
     */
    public function setStructure($structure)
    {
        $this->container['structure'] = $structure;

        return $this;
    }

    /**
     * Gets stuck_arrows
     *
     * @return int
     */
    public function getStuckArrows()
    {
        return $this->container['stuck_arrows'];
    }

    /**
     * Sets stuck_arrows
     *
     * @param int $stuck_arrows stuck_arrows
     *
     * @return $this
     */
    public function setStuckArrows($stuck_arrows)
    {
        $this->container['stuck_arrows'] = $stuck_arrows;

        return $this;
    }

    /**
     * Gets tamed
     *
     * @return \Swagger\Client\Model\TameableData
     */
    public function getTamed()
    {
        return $this->container['tamed'];
    }

    /**
     * Sets tamed
     *
     * @param \Swagger\Client\Model\TameableData $tamed tamed
     *
     * @return $this
     */
    public function setTamed($tamed)
    {
        $this->container['tamed'] = $tamed;

        return $this;
    }

    /**
     * Gets target
     *
     * @return \Swagger\Client\Model\Vector3d
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param \Swagger\Client\Model\Vector3d $target target
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets trades
     *
     * @return \Swagger\Client\Model\TradeOffer[]
     */
    public function getTrades()
    {
        return $this->container['trades'];
    }

    /**
     * Sets trades
     *
     * @param \Swagger\Client\Model\TradeOffer[] $trades trades
     *
     * @return $this
     */
    public function setTrades($trades)
    {
        $this->container['trades'] = $trades;

        return $this;
    }

    /**
     * Gets tree
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getTree()
    {
        return $this->container['tree'];
    }

    /**
     * Sets tree
     *
     * @param \Swagger\Client\Model\CatalogType $tree tree
     *
     * @return $this
     */
    public function setTree($tree)
    {
        $this->container['tree'] = $tree;

        return $this;
    }

    /**
     * Gets vehicle
     *
     * @return \Swagger\Client\Model\VehicleData
     */
    public function getVehicle()
    {
        return $this->container['vehicle'];
    }

    /**
     * Sets vehicle
     *
     * @param \Swagger\Client\Model\VehicleData $vehicle vehicle
     *
     * @return $this
     */
    public function setVehicle($vehicle)
    {
        $this->container['vehicle'] = $vehicle;

        return $this;
    }

    /**
     * Gets wall
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getWall()
    {
        return $this->container['wall'];
    }

    /**
     * Sets wall
     *
     * @param \Swagger\Client\Model\CatalogType $wall wall
     *
     * @return $this
     */
    public function setWall($wall)
    {
        $this->container['wall'] = $wall;

        return $this;
    }

    /**
     * Gets wet
     *
     * @return bool
     */
    public function getWet()
    {
        return $this->container['wet'];
    }

    /**
     * Sets wet
     *
     * @param bool $wet wet
     *
     * @return $this
     */
    public function setWet($wet)
    {
        $this->container['wet'] = $wet;

        return $this;
    }

    /**
     * Gets wires
     *
     * @return \Swagger\Client\Model\WireAttachmentData
     */
    public function getWires()
    {
        return $this->container['wires'];
    }

    /**
     * Sets wires
     *
     * @param \Swagger\Client\Model\WireAttachmentData $wires wires
     *
     * @return $this
     */
    public function setWires($wires)
    {
        $this->container['wires'] = $wires;

        return $this;
    }

    /**
     * Gets accepts_items
     *
     * @return \Swagger\Client\Model\AcceptsItems
     */
    public function getAcceptsItems()
    {
        return $this->container['accepts_items'];
    }

    /**
     * Sets accepts_items
     *
     * @param \Swagger\Client\Model\AcceptsItems $accepts_items accepts_items
     *
     * @return $this
     */
    public function setAcceptsItems($accepts_items)
    {
        $this->container['accepts_items'] = $accepts_items;

        return $this;
    }

    /**
     * Gets applicable_effect
     *
     * @return \Swagger\Client\Model\PotionEffect[]
     */
    public function getApplicableEffect()
    {
        return $this->container['applicable_effect'];
    }

    /**
     * Sets applicable_effect
     *
     * @param \Swagger\Client\Model\PotionEffect[] $applicable_effect applicable_effect
     *
     * @return $this
     */
    public function setApplicableEffect($applicable_effect)
    {
        $this->container['applicable_effect'] = $applicable_effect;

        return $this;
    }

    /**
     * Gets armor_slot_type
     *
     * @return \Swagger\Client\Model\ArmorSlotType
     */
    public function getArmorSlotType()
    {
        return $this->container['armor_slot_type'];
    }

    /**
     * Sets armor_slot_type
     *
     * @param \Swagger\Client\Model\ArmorSlotType $armor_slot_type armor_slot_type
     *
     * @return $this
     */
    public function setArmorSlotType($armor_slot_type)
    {
        $this->container['armor_slot_type'] = $armor_slot_type;

        return $this;
    }

    /**
     * Gets armor_type
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getArmorType()
    {
        return $this->container['armor_type'];
    }

    /**
     * Sets armor_type
     *
     * @param \Swagger\Client\Model\CatalogType $armor_type armor_type
     *
     * @return $this
     */
    public function setArmorType($armor_type)
    {
        $this->container['armor_type'] = $armor_type;

        return $this;
    }

    /**
     * Gets blast_resistance
     *
     * @return double
     */
    public function getBlastResistance()
    {
        return $this->container['blast_resistance'];
    }

    /**
     * Sets blast_resistance
     *
     * @param double $blast_resistance blast_resistance
     *
     * @return $this
     */
    public function setBlastResistance($blast_resistance)
    {
        $this->container['blast_resistance'] = $blast_resistance;

        return $this;
    }

    /**
     * Gets burning_fuel
     *
     * @return int
     */
    public function getBurningFuel()
    {
        return $this->container['burning_fuel'];
    }

    /**
     * Sets burning_fuel
     *
     * @param int $burning_fuel burning_fuel
     *
     * @return $this
     */
    public function setBurningFuel($burning_fuel)
    {
        $this->container['burning_fuel'] = $burning_fuel;

        return $this;
    }

    /**
     * Gets damage_absorption
     *
     * @return int
     */
    public function getDamageAbsorption()
    {
        return $this->container['damage_absorption'];
    }

    /**
     * Sets damage_absorption
     *
     * @param int $damage_absorption damage_absorption
     *
     * @return $this
     */
    public function setDamageAbsorption($damage_absorption)
    {
        $this->container['damage_absorption'] = $damage_absorption;

        return $this;
    }

    /**
     * Gets efficiency
     *
     * @return double
     */
    public function getEfficiency()
    {
        return $this->container['efficiency'];
    }

    /**
     * Sets efficiency
     *
     * @param double $efficiency efficiency
     *
     * @return $this
     */
    public function setEfficiency($efficiency)
    {
        $this->container['efficiency'] = $efficiency;

        return $this;
    }

    /**
     * Gets equipment_type
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getEquipmentType()
    {
        return $this->container['equipment_type'];
    }

    /**
     * Sets equipment_type
     *
     * @param \Swagger\Client\Model\CatalogType $equipment_type equipment_type
     *
     * @return $this
     */
    public function setEquipmentType($equipment_type)
    {
        $this->container['equipment_type'] = $equipment_type;

        return $this;
    }

    /**
     * Gets equiptment_slot_type
     *
     * @return \Swagger\Client\Model\EquipmentSlotType
     */
    public function getEquiptmentSlotType()
    {
        return $this->container['equiptment_slot_type'];
    }

    /**
     * Sets equiptment_slot_type
     *
     * @param \Swagger\Client\Model\EquipmentSlotType $equiptment_slot_type equiptment_slot_type
     *
     * @return $this
     */
    public function setEquiptmentSlotType($equiptment_slot_type)
    {
        $this->container['equiptment_slot_type'] = $equiptment_slot_type;

        return $this;
    }

    /**
     * Gets eye_height
     *
     * @return double
     */
    public function getEyeHeight()
    {
        return $this->container['eye_height'];
    }

    /**
     * Sets eye_height
     *
     * @param double $eye_height eye_height
     *
     * @return $this
     */
    public function setEyeHeight($eye_height)
    {
        $this->container['eye_height'] = $eye_height;

        return $this;
    }

    /**
     * Gets eye_location
     *
     * @return \Swagger\Client\Model\Vector3d
     */
    public function getEyeLocation()
    {
        return $this->container['eye_location'];
    }

    /**
     * Sets eye_location
     *
     * @param \Swagger\Client\Model\Vector3d $eye_location eye_location
     *
     * @return $this
     */
    public function setEyeLocation($eye_location)
    {
        $this->container['eye_location'] = $eye_location;

        return $this;
    }

    /**
     * Gets fluid_temperature
     *
     * @return int
     */
    public function getFluidTemperature()
    {
        return $this->container['fluid_temperature'];
    }

    /**
     * Sets fluid_temperature
     *
     * @param int $fluid_temperature fluid_temperature
     *
     * @return $this
     */
    public function setFluidTemperature($fluid_temperature)
    {
        $this->container['fluid_temperature'] = $fluid_temperature;

        return $this;
    }

    /**
     * Gets fluid_viscosity
     *
     * @return int
     */
    public function getFluidViscosity()
    {
        return $this->container['fluid_viscosity'];
    }

    /**
     * Sets fluid_viscosity
     *
     * @param int $fluid_viscosity fluid_viscosity
     *
     * @return $this
     */
    public function setFluidViscosity($fluid_viscosity)
    {
        $this->container['fluid_viscosity'] = $fluid_viscosity;

        return $this;
    }

    /**
     * Gets food_restoration
     *
     * @return int
     */
    public function getFoodRestoration()
    {
        return $this->container['food_restoration'];
    }

    /**
     * Sets food_restoration
     *
     * @param int $food_restoration food_restoration
     *
     * @return $this
     */
    public function setFoodRestoration($food_restoration)
    {
        $this->container['food_restoration'] = $food_restoration;

        return $this;
    }

    /**
     * Gets full_block_selection_box
     *
     * @return bool
     */
    public function getFullBlockSelectionBox()
    {
        return $this->container['full_block_selection_box'];
    }

    /**
     * Sets full_block_selection_box
     *
     * @param bool $full_block_selection_box full_block_selection_box
     *
     * @return $this
     */
    public function setFullBlockSelectionBox($full_block_selection_box)
    {
        $this->container['full_block_selection_box'] = $full_block_selection_box;

        return $this;
    }

    /**
     * Gets gravity_affected
     *
     * @return bool
     */
    public function getGravityAffected()
    {
        return $this->container['gravity_affected'];
    }

    /**
     * Sets gravity_affected
     *
     * @param bool $gravity_affected gravity_affected
     *
     * @return $this
     */
    public function setGravityAffected($gravity_affected)
    {
        $this->container['gravity_affected'] = $gravity_affected;

        return $this;
    }

    /**
     * Gets ground_luminance
     *
     * @return double
     */
    public function getGroundLuminance()
    {
        return $this->container['ground_luminance'];
    }

    /**
     * Sets ground_luminance
     *
     * @param double $ground_luminance ground_luminance
     *
     * @return $this
     */
    public function setGroundLuminance($ground_luminance)
    {
        $this->container['ground_luminance'] = $ground_luminance;

        return $this;
    }

    /**
     * Gets gui_id
     *
     * @return \Swagger\Client\Model\GuiIdProperty
     */
    public function getGuiId()
    {
        return $this->container['gui_id'];
    }

    /**
     * Sets gui_id
     *
     * @param \Swagger\Client\Model\GuiIdProperty $gui_id gui_id
     *
     * @return $this
     */
    public function setGuiId($gui_id)
    {
        $this->container['gui_id'] = $gui_id;

        return $this;
    }

    /**
     * Gets hardness
     *
     * @return double
     */
    public function getHardness()
    {
        return $this->container['hardness'];
    }

    /**
     * Sets hardness
     *
     * @param double $hardness hardness
     *
     * @return $this
     */
    public function setHardness($hardness)
    {
        $this->container['hardness'] = $hardness;

        return $this;
    }

    /**
     * Gets held_item
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getHeldItem()
    {
        return $this->container['held_item'];
    }

    /**
     * Sets held_item
     *
     * @param \Swagger\Client\Model\CatalogType $held_item held_item
     *
     * @return $this
     */
    public function setHeldItem($held_item)
    {
        $this->container['held_item'] = $held_item;

        return $this;
    }

    /**
     * Gets identifiable
     *
     * @return \Swagger\Client\Model\Identifiable
     */
    public function getIdentifiable()
    {
        return $this->container['identifiable'];
    }

    /**
     * Sets identifiable
     *
     * @param \Swagger\Client\Model\Identifiable $identifiable identifiable
     *
     * @return $this
     */
    public function setIdentifiable($identifiable)
    {
        $this->container['identifiable'] = $identifiable;

        return $this;
    }

    /**
     * Gets indirectly_powered
     *
     * @return bool
     */
    public function getIndirectlyPowered()
    {
        return $this->container['indirectly_powered'];
    }

    /**
     * Sets indirectly_powered
     *
     * @param bool $indirectly_powered indirectly_powered
     *
     * @return $this
     */
    public function setIndirectlyPowered($indirectly_powered)
    {
        $this->container['indirectly_powered'] = $indirectly_powered;

        return $this;
    }

    /**
     * Gets instrument
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getInstrument()
    {
        return $this->container['instrument'];
    }

    /**
     * Sets instrument
     *
     * @param \Swagger\Client\Model\CatalogType $instrument instrument
     *
     * @return $this
     */
    public function setInstrument($instrument)
    {
        $this->container['instrument'] = $instrument;

        return $this;
    }

    /**
     * Gets inventory_capacity
     *
     * @return \Swagger\Client\Model\InventoryCapacity
     */
    public function getInventoryCapacity()
    {
        return $this->container['inventory_capacity'];
    }

    /**
     * Sets inventory_capacity
     *
     * @param \Swagger\Client\Model\InventoryCapacity $inventory_capacity inventory_capacity
     *
     * @return $this
     */
    public function setInventoryCapacity($inventory_capacity)
    {
        $this->container['inventory_capacity'] = $inventory_capacity;

        return $this;
    }

    /**
     * Gets inventory_dimension
     *
     * @return \Swagger\Client\Model\InventoryDimension
     */
    public function getInventoryDimension()
    {
        return $this->container['inventory_dimension'];
    }

    /**
     * Sets inventory_dimension
     *
     * @param \Swagger\Client\Model\InventoryDimension $inventory_dimension inventory_dimension
     *
     * @return $this
     */
    public function setInventoryDimension($inventory_dimension)
    {
        $this->container['inventory_dimension'] = $inventory_dimension;

        return $this;
    }

    /**
     * Gets inventory_title
     *
     * @return \Swagger\Client\Model\InventoryTitle
     */
    public function getInventoryTitle()
    {
        return $this->container['inventory_title'];
    }

    /**
     * Sets inventory_title
     *
     * @param \Swagger\Client\Model\InventoryTitle $inventory_title inventory_title
     *
     * @return $this
     */
    public function setInventoryTitle($inventory_title)
    {
        $this->container['inventory_title'] = $inventory_title;

        return $this;
    }

    /**
     * Gets light_emission
     *
     * @return int
     */
    public function getLightEmission()
    {
        return $this->container['light_emission'];
    }

    /**
     * Sets light_emission
     *
     * @param int $light_emission light_emission
     *
     * @return $this
     */
    public function setLightEmission($light_emission)
    {
        $this->container['light_emission'] = $light_emission;

        return $this;
    }

    /**
     * Gets matter
     *
     * @return string
     */
    public function getMatter()
    {
        return $this->container['matter'];
    }

    /**
     * Sets matter
     *
     * @param string $matter matter
     *
     * @return $this
     */
    public function setMatter($matter)
    {
        $allowedValues = $this->getMatterAllowableValues();
        if (!is_null($matter) && !in_array($matter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'matter', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['matter'] = $matter;

        return $this;
    }

    /**
     * Gets passable
     *
     * @return bool
     */
    public function getPassable()
    {
        return $this->container['passable'];
    }

    /**
     * Sets passable
     *
     * @param bool $passable passable
     *
     * @return $this
     */
    public function setPassable($passable)
    {
        $this->container['passable'] = $passable;

        return $this;
    }

    /**
     * Gets record
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getRecord()
    {
        return $this->container['record'];
    }

    /**
     * Sets record
     *
     * @param \Swagger\Client\Model\CatalogType $record record
     *
     * @return $this
     */
    public function setRecord($record)
    {
        $this->container['record'] = $record;

        return $this;
    }

    /**
     * Gets replaceable
     *
     * @return bool
     */
    public function getReplaceable()
    {
        return $this->container['replaceable'];
    }

    /**
     * Sets replaceable
     *
     * @param bool $replaceable replaceable
     *
     * @return $this
     */
    public function setReplaceable($replaceable)
    {
        $this->container['replaceable'] = $replaceable;

        return $this;
    }

    /**
     * Gets saturation_property
     *
     * @return double
     */
    public function getSaturationProperty()
    {
        return $this->container['saturation_property'];
    }

    /**
     * Sets saturation_property
     *
     * @param double $saturation_property saturation_property
     *
     * @return $this
     */
    public function setSaturationProperty($saturation_property)
    {
        $this->container['saturation_property'] = $saturation_property;

        return $this;
    }

    /**
     * Gets sky_luminance
     *
     * @return double
     */
    public function getSkyLuminance()
    {
        return $this->container['sky_luminance'];
    }

    /**
     * Sets sky_luminance
     *
     * @param double $sky_luminance sky_luminance
     *
     * @return $this
     */
    public function setSkyLuminance($sky_luminance)
    {
        $this->container['sky_luminance'] = $sky_luminance;

        return $this;
    }

    /**
     * Gets slot_index
     *
     * @return \Swagger\Client\Model\SlotIndex
     */
    public function getSlotIndex()
    {
        return $this->container['slot_index'];
    }

    /**
     * Sets slot_index
     *
     * @param \Swagger\Client\Model\SlotIndex $slot_index slot_index
     *
     * @return $this
     */
    public function setSlotIndex($slot_index)
    {
        $this->container['slot_index'] = $slot_index;

        return $this;
    }

    /**
     * Gets slot_pos
     *
     * @return \Swagger\Client\Model\SlotPos
     */
    public function getSlotPos()
    {
        return $this->container['slot_pos'];
    }

    /**
     * Sets slot_pos
     *
     * @param \Swagger\Client\Model\SlotPos $slot_pos slot_pos
     *
     * @return $this
     */
    public function setSlotPos($slot_pos)
    {
        $this->container['slot_pos'] = $slot_pos;

        return $this;
    }

    /**
     * Gets slot_side
     *
     * @return \Swagger\Client\Model\SlotSide
     */
    public function getSlotSide()
    {
        return $this->container['slot_side'];
    }

    /**
     * Sets slot_side
     *
     * @param \Swagger\Client\Model\SlotSide $slot_side slot_side
     *
     * @return $this
     */
    public function setSlotSide($slot_side)
    {
        $this->container['slot_side'] = $slot_side;

        return $this;
    }

    /**
     * Gets smeltable
     *
     * @return bool
     */
    public function getSmeltable()
    {
        return $this->container['smeltable'];
    }

    /**
     * Sets smeltable
     *
     * @param bool $smeltable smeltable
     *
     * @return $this
     */
    public function setSmeltable($smeltable)
    {
        $this->container['smeltable'] = $smeltable;

        return $this;
    }

    /**
     * Gets solid_cube
     *
     * @return bool
     */
    public function getSolidCube()
    {
        return $this->container['solid_cube'];
    }

    /**
     * Sets solid_cube
     *
     * @param bool $solid_cube solid_cube
     *
     * @return $this
     */
    public function setSolidCube($solid_cube)
    {
        $this->container['solid_cube'] = $solid_cube;

        return $this;
    }

    /**
     * Gets statistics_tracked
     *
     * @return bool
     */
    public function getStatisticsTracked()
    {
        return $this->container['statistics_tracked'];
    }

    /**
     * Sets statistics_tracked
     *
     * @param bool $statistics_tracked statistics_tracked
     *
     * @return $this
     */
    public function setStatisticsTracked($statistics_tracked)
    {
        $this->container['statistics_tracked'] = $statistics_tracked;

        return $this;
    }

    /**
     * Gets surrogate_block
     *
     * @return bool
     */
    public function getSurrogateBlock()
    {
        return $this->container['surrogate_block'];
    }

    /**
     * Sets surrogate_block
     *
     * @param bool $surrogate_block surrogate_block
     *
     * @return $this
     */
    public function setSurrogateBlock($surrogate_block)
    {
        $this->container['surrogate_block'] = $surrogate_block;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return double
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param double $temperature temperature
     *
     * @return $this
     */
    public function setTemperature($temperature)
    {
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets tool_type
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getToolType()
    {
        return $this->container['tool_type'];
    }

    /**
     * Sets tool_type
     *
     * @param \Swagger\Client\Model\CatalogType $tool_type tool_type
     *
     * @return $this
     */
    public function setToolType($tool_type)
    {
        $this->container['tool_type'] = $tool_type;

        return $this;
    }

    /**
     * Gets unbreakable
     *
     * @return bool
     */
    public function getUnbreakable()
    {
        return $this->container['unbreakable'];
    }

    /**
     * Sets unbreakable
     *
     * @param bool $unbreakable unbreakable
     *
     * @return $this
     */
    public function setUnbreakable($unbreakable)
    {
        $this->container['unbreakable'] = $unbreakable;

        return $this;
    }

    /**
     * Gets use_limit
     *
     * @return int
     */
    public function getUseLimit()
    {
        return $this->container['use_limit'];
    }

    /**
     * Sets use_limit
     *
     * @param int $use_limit use_limit
     *
     * @return $this
     */
    public function setUseLimit($use_limit)
    {
        $this->container['use_limit'] = $use_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * UpdatePlayerRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdatePlayerRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdatePlayerRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdatePlayerRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'damage' => '\Swagger\Client\Model\DamageRequest',
        'exhaustion' => 'double',
        'experience_since_level' => 'int',
        'food_level' => 'int',
        'health' => 'double',
        'inventory' => '\Swagger\Client\Model\ItemStack[]',
        'level' => 'int',
        'max_health' => 'double',
        'position' => '\Swagger\Client\Model\Vector3d',
        'rotation' => '\Swagger\Client\Model\Vector3d',
        'saturation' => 'double',
        'scale' => '\Swagger\Client\Model\Vector3d',
        'total_experience' => 'int',
        'velocity' => '\Swagger\Client\Model\Vector3d',
        'world' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'damage' => null,
        'exhaustion' => 'double',
        'experience_since_level' => 'int32',
        'food_level' => 'int32',
        'health' => 'double',
        'inventory' => null,
        'level' => 'int32',
        'max_health' => 'double',
        'position' => null,
        'rotation' => null,
        'saturation' => 'double',
        'scale' => null,
        'total_experience' => 'int32',
        'velocity' => null,
        'world' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'damage' => 'damage',
        'exhaustion' => 'exhaustion',
        'experience_since_level' => 'experienceSinceLevel',
        'food_level' => 'foodLevel',
        'health' => 'health',
        'inventory' => 'inventory',
        'level' => 'level',
        'max_health' => 'maxHealth',
        'position' => 'position',
        'rotation' => 'rotation',
        'saturation' => 'saturation',
        'scale' => 'scale',
        'total_experience' => 'totalExperience',
        'velocity' => 'velocity',
        'world' => 'world'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'damage' => 'setDamage',
        'exhaustion' => 'setExhaustion',
        'experience_since_level' => 'setExperienceSinceLevel',
        'food_level' => 'setFoodLevel',
        'health' => 'setHealth',
        'inventory' => 'setInventory',
        'level' => 'setLevel',
        'max_health' => 'setMaxHealth',
        'position' => 'setPosition',
        'rotation' => 'setRotation',
        'saturation' => 'setSaturation',
        'scale' => 'setScale',
        'total_experience' => 'setTotalExperience',
        'velocity' => 'setVelocity',
        'world' => 'setWorld'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'damage' => 'getDamage',
        'exhaustion' => 'getExhaustion',
        'experience_since_level' => 'getExperienceSinceLevel',
        'food_level' => 'getFoodLevel',
        'health' => 'getHealth',
        'inventory' => 'getInventory',
        'level' => 'getLevel',
        'max_health' => 'getMaxHealth',
        'position' => 'getPosition',
        'rotation' => 'getRotation',
        'saturation' => 'getSaturation',
        'scale' => 'getScale',
        'total_experience' => 'getTotalExperience',
        'velocity' => 'getVelocity',
        'world' => 'getWorld'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['damage'] = isset($data['damage']) ? $data['damage'] : null;
        $this->container['exhaustion'] = isset($data['exhaustion']) ? $data['exhaustion'] : null;
        $this->container['experience_since_level'] = isset($data['experience_since_level']) ? $data['experience_since_level'] : null;
        $this->container['food_level'] = isset($data['food_level']) ? $data['food_level'] : null;
        $this->container['health'] = isset($data['health']) ? $data['health'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['max_health'] = isset($data['max_health']) ? $data['max_health'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['rotation'] = isset($data['rotation']) ? $data['rotation'] : null;
        $this->container['saturation'] = isset($data['saturation']) ? $data['saturation'] : null;
        $this->container['scale'] = isset($data['scale']) ? $data['scale'] : null;
        $this->container['total_experience'] = isset($data['total_experience']) ? $data['total_experience'] : null;
        $this->container['velocity'] = isset($data['velocity']) ? $data['velocity'] : null;
        $this->container['world'] = isset($data['world']) ? $data['world'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets damage
     *
     * @return \Swagger\Client\Model\DamageRequest
     */
    public function getDamage()
    {
        return $this->container['damage'];
    }

    /**
     * Sets damage
     *
     * @param \Swagger\Client\Model\DamageRequest $damage The damage the entity will take
     *
     * @return $this
     */
    public function setDamage($damage)
    {
        $this->container['damage'] = $damage;

        return $this;
    }

    /**
     * Gets exhaustion
     *
     * @return double
     */
    public function getExhaustion()
    {
        return $this->container['exhaustion'];
    }

    /**
     * Sets exhaustion
     *
     * @param double $exhaustion The exhaustion of the player
     *
     * @return $this
     */
    public function setExhaustion($exhaustion)
    {
        $this->container['exhaustion'] = $exhaustion;

        return $this;
    }

    /**
     * Gets experience_since_level
     *
     * @return int
     */
    public function getExperienceSinceLevel()
    {
        return $this->container['experience_since_level'];
    }

    /**
     * Sets experience_since_level
     *
     * @param int $experience_since_level The amount of experience gained since the last level
     *
     * @return $this
     */
    public function setExperienceSinceLevel($experience_since_level)
    {
        $this->container['experience_since_level'] = $experience_since_level;

        return $this;
    }

    /**
     * Gets food_level
     *
     * @return int
     */
    public function getFoodLevel()
    {
        return $this->container['food_level'];
    }

    /**
     * Sets food_level
     *
     * @param int $food_level The food level of the player
     *
     * @return $this
     */
    public function setFoodLevel($food_level)
    {
        $this->container['food_level'] = $food_level;

        return $this;
    }

    /**
     * Gets health
     *
     * @return double
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param double $health The current amount of health the player has
     *
     * @return $this
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return \Swagger\Client\Model\ItemStack[]
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param \Swagger\Client\Model\ItemStack[] $inventory The ItemStacks in the inventory of the entity
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level The player level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets max_health
     *
     * @return double
     */
    public function getMaxHealth()
    {
        return $this->container['max_health'];
    }

    /**
     * Sets max_health
     *
     * @param double $max_health The maximum health of the player
     *
     * @return $this
     */
    public function setMaxHealth($max_health)
    {
        $this->container['max_health'] = $max_health;

        return $this;
    }

    /**
     * Gets position
     *
     * @return \Swagger\Client\Model\Vector3d
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param \Swagger\Client\Model\Vector3d $position The position that the entity will be moved to
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets rotation
     *
     * @return \Swagger\Client\Model\Vector3d
     */
    public function getRotation()
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     *
     * @param \Swagger\Client\Model\Vector3d $rotation The new rotation of the entity
     *
     * @return $this
     */
    public function setRotation($rotation)
    {
        $this->container['rotation'] = $rotation;

        return $this;
    }

    /**
     * Gets saturation
     *
     * @return double
     */
    public function getSaturation()
    {
        return $this->container['saturation'];
    }

    /**
     * Sets saturation
     *
     * @param double $saturation The saturation of the player
     *
     * @return $this
     */
    public function setSaturation($saturation)
    {
        $this->container['saturation'] = $saturation;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return \Swagger\Client\Model\Vector3d
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param \Swagger\Client\Model\Vector3d $scale The new scale of the entity
     *
     * @return $this
     */
    public function setScale($scale)
    {
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets total_experience
     *
     * @return int
     */
    public function getTotalExperience()
    {
        return $this->container['total_experience'];
    }

    /**
     * Sets total_experience
     *
     * @param int $total_experience The total experience of the player
     *
     * @return $this
     */
    public function setTotalExperience($total_experience)
    {
        $this->container['total_experience'] = $total_experience;

        return $this;
    }

    /**
     * Gets velocity
     *
     * @return \Swagger\Client\Model\Vector3d
     */
    public function getVelocity()
    {
        return $this->container['velocity'];
    }

    /**
     * Sets velocity
     *
     * @param \Swagger\Client\Model\Vector3d $velocity The new speed of the entity
     *
     * @return $this
     */
    public function setVelocity($velocity)
    {
        $this->container['velocity'] = $velocity;

        return $this;
    }

    /**
     * Gets world
     *
     * @return string
     */
    public function getWorld()
    {
        return $this->container['world'];
    }

    /**
     * Sets world
     *
     * @param string $world The world that the entity will be moved to
     *
     * @return $this
     */
    public function setWorld($world)
    {
        $this->container['world'] = $world;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



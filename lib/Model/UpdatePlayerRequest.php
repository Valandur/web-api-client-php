<?php
/**
 * UpdatePlayerRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  #/ Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  #/ Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * UpdatePlayerRequest Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UpdatePlayerRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UpdatePlayerRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'world' => 'string',
        'position' => '\Swagger\Client\Model\Vector3',
        'velocity' => '\Swagger\Client\Model\Vector3',
        'rotation' => '\Swagger\Client\Model\Vector3',
        'scale' => '\Swagger\Client\Model\Vector3',
        'food_level' => 'float',
        'exhaustion' => 'double',
        'saturation' => 'double',
        'total_experience' => 'float',
        'level' => 'float',
        'experience_since_level' => 'float',
        'health' => 'double',
        'max_health' => 'double',
        'damage' => '\Swagger\Client\Model\DamageRequest1'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'world' => null,
        'position' => null,
        'velocity' => null,
        'rotation' => null,
        'scale' => null,
        'food_level' => 'integer',
        'exhaustion' => 'double',
        'saturation' => 'double',
        'total_experience' => 'integer',
        'level' => 'integer',
        'experience_since_level' => 'integer',
        'health' => 'double',
        'max_health' => 'double',
        'damage' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'world' => 'world',
        'position' => 'position',
        'velocity' => 'velocity',
        'rotation' => 'rotation',
        'scale' => 'scale',
        'food_level' => 'foodLevel',
        'exhaustion' => 'exhaustion',
        'saturation' => 'saturation',
        'total_experience' => 'totalExperience',
        'level' => 'level',
        'experience_since_level' => 'experienceSinceLevel',
        'health' => 'health',
        'max_health' => 'maxHealth',
        'damage' => 'damage'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'world' => 'setWorld',
        'position' => 'setPosition',
        'velocity' => 'setVelocity',
        'rotation' => 'setRotation',
        'scale' => 'setScale',
        'food_level' => 'setFoodLevel',
        'exhaustion' => 'setExhaustion',
        'saturation' => 'setSaturation',
        'total_experience' => 'setTotalExperience',
        'level' => 'setLevel',
        'experience_since_level' => 'setExperienceSinceLevel',
        'health' => 'setHealth',
        'max_health' => 'setMaxHealth',
        'damage' => 'setDamage'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'world' => 'getWorld',
        'position' => 'getPosition',
        'velocity' => 'getVelocity',
        'rotation' => 'getRotation',
        'scale' => 'getScale',
        'food_level' => 'getFoodLevel',
        'exhaustion' => 'getExhaustion',
        'saturation' => 'getSaturation',
        'total_experience' => 'getTotalExperience',
        'level' => 'getLevel',
        'experience_since_level' => 'getExperienceSinceLevel',
        'health' => 'getHealth',
        'max_health' => 'getMaxHealth',
        'damage' => 'getDamage'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['world'] = isset($data['world']) ? $data['world'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['velocity'] = isset($data['velocity']) ? $data['velocity'] : null;
        $this->container['rotation'] = isset($data['rotation']) ? $data['rotation'] : null;
        $this->container['scale'] = isset($data['scale']) ? $data['scale'] : null;
        $this->container['food_level'] = isset($data['food_level']) ? $data['food_level'] : null;
        $this->container['exhaustion'] = isset($data['exhaustion']) ? $data['exhaustion'] : null;
        $this->container['saturation'] = isset($data['saturation']) ? $data['saturation'] : null;
        $this->container['total_experience'] = isset($data['total_experience']) ? $data['total_experience'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['experience_since_level'] = isset($data['experience_since_level']) ? $data['experience_since_level'] : null;
        $this->container['health'] = isset($data['health']) ? $data['health'] : null;
        $this->container['max_health'] = isset($data['max_health']) ? $data['max_health'] : null;
        $this->container['damage'] = isset($data['damage']) ? $data['damage'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets world
     * @return string
     */
    public function getWorld()
    {
        return $this->container['world'];
    }

    /**
     * Sets world
     * @param string $world The UUID or name of the world that the player is moved to.
     * @return $this
     */
    public function setWorld($world)
    {
        $this->container['world'] = $world;

        return $this;
    }

    /**
     * Gets position
     * @return \Swagger\Client\Model\Vector3
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param \Swagger\Client\Model\Vector3 $position
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets velocity
     * @return \Swagger\Client\Model\Vector3
     */
    public function getVelocity()
    {
        return $this->container['velocity'];
    }

    /**
     * Sets velocity
     * @param \Swagger\Client\Model\Vector3 $velocity
     * @return $this
     */
    public function setVelocity($velocity)
    {
        $this->container['velocity'] = $velocity;

        return $this;
    }

    /**
     * Gets rotation
     * @return \Swagger\Client\Model\Vector3
     */
    public function getRotation()
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     * @param \Swagger\Client\Model\Vector3 $rotation
     * @return $this
     */
    public function setRotation($rotation)
    {
        $this->container['rotation'] = $rotation;

        return $this;
    }

    /**
     * Gets scale
     * @return \Swagger\Client\Model\Vector3
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     * @param \Swagger\Client\Model\Vector3 $scale
     * @return $this
     */
    public function setScale($scale)
    {
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets food_level
     * @return float
     */
    public function getFoodLevel()
    {
        return $this->container['food_level'];
    }

    /**
     * Sets food_level
     * @param float $food_level The new food level of the player.
     * @return $this
     */
    public function setFoodLevel($food_level)
    {
        $this->container['food_level'] = $food_level;

        return $this;
    }

    /**
     * Gets exhaustion
     * @return double
     */
    public function getExhaustion()
    {
        return $this->container['exhaustion'];
    }

    /**
     * Sets exhaustion
     * @param double $exhaustion The new exhaustion level of the player.
     * @return $this
     */
    public function setExhaustion($exhaustion)
    {
        $this->container['exhaustion'] = $exhaustion;

        return $this;
    }

    /**
     * Gets saturation
     * @return double
     */
    public function getSaturation()
    {
        return $this->container['saturation'];
    }

    /**
     * Sets saturation
     * @param double $saturation The new saturation level of the player.
     * @return $this
     */
    public function setSaturation($saturation)
    {
        $this->container['saturation'] = $saturation;

        return $this;
    }

    /**
     * Gets total_experience
     * @return float
     */
    public function getTotalExperience()
    {
        return $this->container['total_experience'];
    }

    /**
     * Sets total_experience
     * @param float $total_experience The total amount of experience the player has. This implicitly also sets the level.
     * @return $this
     */
    public function setTotalExperience($total_experience)
    {
        $this->container['total_experience'] = $total_experience;

        return $this;
    }

    /**
     * Gets level
     * @return float
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param float $level The current level of the player. This is also defined by the total amount of experience the player has.
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets experience_since_level
     * @return float
     */
    public function getExperienceSinceLevel()
    {
        return $this->container['experience_since_level'];
    }

    /**
     * Sets experience_since_level
     * @param float $experience_since_level The amount of experience since the last level up that the player has collected.
     * @return $this
     */
    public function setExperienceSinceLevel($experience_since_level)
    {
        $this->container['experience_since_level'] = $experience_since_level;

        return $this;
    }

    /**
     * Gets health
     * @return double
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     * @param double $health The current amount of health the player has.
     * @return $this
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets max_health
     * @return double
     */
    public function getMaxHealth()
    {
        return $this->container['max_health'];
    }

    /**
     * Sets max_health
     * @param double $max_health The total amount of health the player can have at maximum.
     * @return $this
     */
    public function setMaxHealth($max_health)
    {
        $this->container['max_health'] = $max_health;

        return $this;
    }

    /**
     * Gets damage
     * @return \Swagger\Client\Model\DamageRequest1
     */
    public function getDamage()
    {
        return $this->container['damage'];
    }

    /**
     * Sets damage
     * @param \Swagger\Client\Model\DamageRequest1 $damage
     * @return $this
     */
    public function setDamage($damage)
    {
        $this->container['damage'] = $damage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



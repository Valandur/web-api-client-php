<?php
/**
 * StructureData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StructureData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StructureData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StructureData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'author' => 'string',
        'ignore_entities' => 'bool',
        'integrity' => 'float',
        'mode' => '\Swagger\Client\Model\CatalogType',
        'position' => '\Swagger\Client\Model\Vector3i',
        'powered' => 'bool',
        'seed' => 'int',
        'show_air' => 'bool',
        'show_bounding_box' => 'bool',
        'size' => '\Swagger\Client\Model\Vector3i'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'author' => null,
        'ignore_entities' => null,
        'integrity' => 'float',
        'mode' => null,
        'position' => null,
        'powered' => null,
        'seed' => 'int64',
        'show_air' => null,
        'show_bounding_box' => null,
        'size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author' => 'author',
        'ignore_entities' => 'ignoreEntities',
        'integrity' => 'integrity',
        'mode' => 'mode',
        'position' => 'position',
        'powered' => 'powered',
        'seed' => 'seed',
        'show_air' => 'showAir',
        'show_bounding_box' => 'showBoundingBox',
        'size' => 'size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author' => 'setAuthor',
        'ignore_entities' => 'setIgnoreEntities',
        'integrity' => 'setIntegrity',
        'mode' => 'setMode',
        'position' => 'setPosition',
        'powered' => 'setPowered',
        'seed' => 'setSeed',
        'show_air' => 'setShowAir',
        'show_bounding_box' => 'setShowBoundingBox',
        'size' => 'setSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author' => 'getAuthor',
        'ignore_entities' => 'getIgnoreEntities',
        'integrity' => 'getIntegrity',
        'mode' => 'getMode',
        'position' => 'getPosition',
        'powered' => 'getPowered',
        'seed' => 'getSeed',
        'show_air' => 'getShowAir',
        'show_bounding_box' => 'getShowBoundingBox',
        'size' => 'getSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['ignore_entities'] = isset($data['ignore_entities']) ? $data['ignore_entities'] : null;
        $this->container['integrity'] = isset($data['integrity']) ? $data['integrity'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['powered'] = isset($data['powered']) ? $data['powered'] : null;
        $this->container['seed'] = isset($data['seed']) ? $data['seed'] : null;
        $this->container['show_air'] = isset($data['show_air']) ? $data['show_air'] : null;
        $this->container['show_bounding_box'] = isset($data['show_bounding_box']) ? $data['show_bounding_box'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['author'] === null) {
            $invalidProperties[] = "'author' can't be null";
        }
        if ($this->container['ignore_entities'] === null) {
            $invalidProperties[] = "'ignore_entities' can't be null";
        }
        if ($this->container['integrity'] === null) {
            $invalidProperties[] = "'integrity' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['powered'] === null) {
            $invalidProperties[] = "'powered' can't be null";
        }
        if ($this->container['seed'] === null) {
            $invalidProperties[] = "'seed' can't be null";
        }
        if ($this->container['show_air'] === null) {
            $invalidProperties[] = "'show_air' can't be null";
        }
        if ($this->container['show_bounding_box'] === null) {
            $invalidProperties[] = "'show_bounding_box' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['author'] === null) {
            return false;
        }
        if ($this->container['ignore_entities'] === null) {
            return false;
        }
        if ($this->container['integrity'] === null) {
            return false;
        }
        if ($this->container['mode'] === null) {
            return false;
        }
        if ($this->container['position'] === null) {
            return false;
        }
        if ($this->container['powered'] === null) {
            return false;
        }
        if ($this->container['seed'] === null) {
            return false;
        }
        if ($this->container['show_air'] === null) {
            return false;
        }
        if ($this->container['show_bounding_box'] === null) {
            return false;
        }
        if ($this->container['size'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author The author of this structure
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets ignore_entities
     *
     * @return bool
     */
    public function getIgnoreEntities()
    {
        return $this->container['ignore_entities'];
    }

    /**
     * Sets ignore_entities
     *
     * @param bool $ignore_entities True if entities are not part of this structure, false otherwise
     *
     * @return $this
     */
    public function setIgnoreEntities($ignore_entities)
    {
        $this->container['ignore_entities'] = $ignore_entities;

        return $this;
    }

    /**
     * Gets integrity
     *
     * @return float
     */
    public function getIntegrity()
    {
        return $this->container['integrity'];
    }

    /**
     * Sets integrity
     *
     * @param float $integrity The integrity of the structure
     *
     * @return $this
     */
    public function setIntegrity($integrity)
    {
        $this->container['integrity'] = $integrity;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return \Swagger\Client\Model\CatalogType
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param \Swagger\Client\Model\CatalogType $mode The mode of the structure
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets position
     *
     * @return \Swagger\Client\Model\Vector3i
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param \Swagger\Client\Model\Vector3i $position The position of the structure
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets powered
     *
     * @return bool
     */
    public function getPowered()
    {
        return $this->container['powered'];
    }

    /**
     * Sets powered
     *
     * @param bool $powered True if the structure is powered, false otherwise
     *
     * @return $this
     */
    public function setPowered($powered)
    {
        $this->container['powered'] = $powered;

        return $this;
    }

    /**
     * Gets seed
     *
     * @return int
     */
    public function getSeed()
    {
        return $this->container['seed'];
    }

    /**
     * Sets seed
     *
     * @param int $seed The seed of this structure
     *
     * @return $this
     */
    public function setSeed($seed)
    {
        $this->container['seed'] = $seed;

        return $this;
    }

    /**
     * Gets show_air
     *
     * @return bool
     */
    public function getShowAir()
    {
        return $this->container['show_air'];
    }

    /**
     * Sets show_air
     *
     * @param bool $show_air True if the air blocks for this structure are shown, false otherwise
     *
     * @return $this
     */
    public function setShowAir($show_air)
    {
        $this->container['show_air'] = $show_air;

        return $this;
    }

    /**
     * Gets show_bounding_box
     *
     * @return bool
     */
    public function getShowBoundingBox()
    {
        return $this->container['show_bounding_box'];
    }

    /**
     * Sets show_bounding_box
     *
     * @param bool $show_bounding_box True if the bounding box for this structure is shown, false otherwise
     *
     * @return $this
     */
    public function setShowBoundingBox($show_bounding_box)
    {
        $this->container['show_bounding_box'] = $show_bounding_box;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \Swagger\Client\Model\Vector3i
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \Swagger\Client\Model\Vector3i $size The size of this structure
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



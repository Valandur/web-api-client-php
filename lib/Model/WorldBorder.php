<?php
/**
 * WorldBorder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WorldBorder Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorldBorder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorldBorder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'center' => '\Swagger\Client\Model\Vector3d',
        'damage_amount' => 'double',
        'damage_threshold' => 'double',
        'diameter' => 'double',
        'new_diameter' => 'double',
        'time_remaining' => 'int',
        'warning_distance' => 'int',
        'warning_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'center' => null,
        'damage_amount' => 'double',
        'damage_threshold' => 'double',
        'diameter' => 'double',
        'new_diameter' => 'double',
        'time_remaining' => 'int64',
        'warning_distance' => 'int32',
        'warning_time' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'center' => 'center',
        'damage_amount' => 'damageAmount',
        'damage_threshold' => 'damageThreshold',
        'diameter' => 'diameter',
        'new_diameter' => 'newDiameter',
        'time_remaining' => 'timeRemaining',
        'warning_distance' => 'warningDistance',
        'warning_time' => 'warningTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'center' => 'setCenter',
        'damage_amount' => 'setDamageAmount',
        'damage_threshold' => 'setDamageThreshold',
        'diameter' => 'setDiameter',
        'new_diameter' => 'setNewDiameter',
        'time_remaining' => 'setTimeRemaining',
        'warning_distance' => 'setWarningDistance',
        'warning_time' => 'setWarningTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'center' => 'getCenter',
        'damage_amount' => 'getDamageAmount',
        'damage_threshold' => 'getDamageThreshold',
        'diameter' => 'getDiameter',
        'new_diameter' => 'getNewDiameter',
        'time_remaining' => 'getTimeRemaining',
        'warning_distance' => 'getWarningDistance',
        'warning_time' => 'getWarningTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['center'] = isset($data['center']) ? $data['center'] : null;
        $this->container['damage_amount'] = isset($data['damage_amount']) ? $data['damage_amount'] : null;
        $this->container['damage_threshold'] = isset($data['damage_threshold']) ? $data['damage_threshold'] : null;
        $this->container['diameter'] = isset($data['diameter']) ? $data['diameter'] : null;
        $this->container['new_diameter'] = isset($data['new_diameter']) ? $data['new_diameter'] : null;
        $this->container['time_remaining'] = isset($data['time_remaining']) ? $data['time_remaining'] : null;
        $this->container['warning_distance'] = isset($data['warning_distance']) ? $data['warning_distance'] : null;
        $this->container['warning_time'] = isset($data['warning_time']) ? $data['warning_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['center'] === null) {
            $invalidProperties[] = "'center' can't be null";
        }
        if ($this->container['damage_amount'] === null) {
            $invalidProperties[] = "'damage_amount' can't be null";
        }
        if ($this->container['damage_threshold'] === null) {
            $invalidProperties[] = "'damage_threshold' can't be null";
        }
        if ($this->container['diameter'] === null) {
            $invalidProperties[] = "'diameter' can't be null";
        }
        if ($this->container['new_diameter'] === null) {
            $invalidProperties[] = "'new_diameter' can't be null";
        }
        if ($this->container['time_remaining'] === null) {
            $invalidProperties[] = "'time_remaining' can't be null";
        }
        if ($this->container['warning_distance'] === null) {
            $invalidProperties[] = "'warning_distance' can't be null";
        }
        if ($this->container['warning_time'] === null) {
            $invalidProperties[] = "'warning_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['center'] === null) {
            return false;
        }
        if ($this->container['damage_amount'] === null) {
            return false;
        }
        if ($this->container['damage_threshold'] === null) {
            return false;
        }
        if ($this->container['diameter'] === null) {
            return false;
        }
        if ($this->container['new_diameter'] === null) {
            return false;
        }
        if ($this->container['time_remaining'] === null) {
            return false;
        }
        if ($this->container['warning_distance'] === null) {
            return false;
        }
        if ($this->container['warning_time'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets center
     *
     * @return \Swagger\Client\Model\Vector3d
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     *
     * @param \Swagger\Client\Model\Vector3d $center The center of the world border
     *
     * @return $this
     */
    public function setCenter($center)
    {
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets damage_amount
     *
     * @return double
     */
    public function getDamageAmount()
    {
        return $this->container['damage_amount'];
    }

    /**
     * Sets damage_amount
     *
     * @param double $damage_amount The amount of damage done to players outside the border
     *
     * @return $this
     */
    public function setDamageAmount($damage_amount)
    {
        $this->container['damage_amount'] = $damage_amount;

        return $this;
    }

    /**
     * Gets damage_threshold
     *
     * @return double
     */
    public function getDamageThreshold()
    {
        return $this->container['damage_threshold'];
    }

    /**
     * Sets damage_threshold
     *
     * @param double $damage_threshold The maximum amount of damage done to a player
     *
     * @return $this
     */
    public function setDamageThreshold($damage_threshold)
    {
        $this->container['damage_threshold'] = $damage_threshold;

        return $this;
    }

    /**
     * Gets diameter
     *
     * @return double
     */
    public function getDiameter()
    {
        return $this->container['diameter'];
    }

    /**
     * Sets diameter
     *
     * @param double $diameter The diameter of the border
     *
     * @return $this
     */
    public function setDiameter($diameter)
    {
        $this->container['diameter'] = $diameter;

        return $this;
    }

    /**
     * Gets new_diameter
     *
     * @return double
     */
    public function getNewDiameter()
    {
        return $this->container['new_diameter'];
    }

    /**
     * Sets new_diameter
     *
     * @param double $new_diameter The new diameter of the border, in case it is collapsing/expanding
     *
     * @return $this
     */
    public function setNewDiameter($new_diameter)
    {
        $this->container['new_diameter'] = $new_diameter;

        return $this;
    }

    /**
     * Gets time_remaining
     *
     * @return int
     */
    public function getTimeRemaining()
    {
        return $this->container['time_remaining'];
    }

    /**
     * Sets time_remaining
     *
     * @param int $time_remaining The time remaining until the border reaches it's new size
     *
     * @return $this
     */
    public function setTimeRemaining($time_remaining)
    {
        $this->container['time_remaining'] = $time_remaining;

        return $this;
    }

    /**
     * Gets warning_distance
     *
     * @return int
     */
    public function getWarningDistance()
    {
        return $this->container['warning_distance'];
    }

    /**
     * Sets warning_distance
     *
     * @param int $warning_distance The amount of distance from the border a player will receive a warning at
     *
     * @return $this
     */
    public function setWarningDistance($warning_distance)
    {
        $this->container['warning_distance'] = $warning_distance;

        return $this;
    }

    /**
     * Gets warning_time
     *
     * @return int
     */
    public function getWarningTime()
    {
        return $this->container['warning_time'];
    }

    /**
     * Sets warning_time
     *
     * @param int $warning_time The amount of time near a border before a warning is shown for players
     *
     * @return $this
     */
    public function setWarningTime($warning_time)
    {
        $this->container['warning_time'] = $warning_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



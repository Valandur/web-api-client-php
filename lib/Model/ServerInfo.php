<?php
/**
 * ServerInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  #/ Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  #/ Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ServerInfo Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServerInfo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ServerInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'motd' => 'string',
        'players' => 'float',
        'max_players' => 'float',
        'uptime_ticks' => 'float',
        'tps' => 'float',
        'has_whitelist' => 'bool',
        'minecraft_version' => 'string',
        'game' => '\Swagger\Client\Model\ServerInfoDetail',
        'api' => '\Swagger\Client\Model\ServerInfoDetail',
        'implementation' => '\Swagger\Client\Model\ServerInfoDetail'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'motd' => 'motd',
        'players' => 'players',
        'max_players' => 'maxPlayers',
        'uptime_ticks' => 'uptimeTicks',
        'tps' => 'tps',
        'has_whitelist' => 'hasWhitelist',
        'minecraft_version' => 'minecraftVersion',
        'game' => 'game',
        'api' => 'api',
        'implementation' => 'implementation'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'motd' => 'setMotd',
        'players' => 'setPlayers',
        'max_players' => 'setMaxPlayers',
        'uptime_ticks' => 'setUptimeTicks',
        'tps' => 'setTps',
        'has_whitelist' => 'setHasWhitelist',
        'minecraft_version' => 'setMinecraftVersion',
        'game' => 'setGame',
        'api' => 'setApi',
        'implementation' => 'setImplementation'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'motd' => 'getMotd',
        'players' => 'getPlayers',
        'max_players' => 'getMaxPlayers',
        'uptime_ticks' => 'getUptimeTicks',
        'tps' => 'getTps',
        'has_whitelist' => 'getHasWhitelist',
        'minecraft_version' => 'getMinecraftVersion',
        'game' => 'getGame',
        'api' => 'getApi',
        'implementation' => 'getImplementation'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['motd'] = isset($data['motd']) ? $data['motd'] : null;
        $this->container['players'] = isset($data['players']) ? $data['players'] : null;
        $this->container['max_players'] = isset($data['max_players']) ? $data['max_players'] : null;
        $this->container['uptime_ticks'] = isset($data['uptime_ticks']) ? $data['uptime_ticks'] : null;
        $this->container['tps'] = isset($data['tps']) ? $data['tps'] : null;
        $this->container['has_whitelist'] = isset($data['has_whitelist']) ? $data['has_whitelist'] : null;
        $this->container['minecraft_version'] = isset($data['minecraft_version']) ? $data['minecraft_version'] : null;
        $this->container['game'] = isset($data['game']) ? $data['game'] : null;
        $this->container['api'] = isset($data['api']) ? $data['api'] : null;
        $this->container['implementation'] = isset($data['implementation']) ? $data['implementation'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets motd
     * @return string
     */
    public function getMotd()
    {
        return $this->container['motd'];
    }

    /**
     * Sets motd
     * @param string $motd The message of the day set on the server.
     * @return $this
     */
    public function setMotd($motd)
    {
        $this->container['motd'] = $motd;

        return $this;
    }

    /**
     * Gets players
     * @return float
     */
    public function getPlayers()
    {
        return $this->container['players'];
    }

    /**
     * Sets players
     * @param float $players The amount of players currently playing on the server
     * @return $this
     */
    public function setPlayers($players)
    {
        $this->container['players'] = $players;

        return $this;
    }

    /**
     * Gets max_players
     * @return float
     */
    public function getMaxPlayers()
    {
        return $this->container['max_players'];
    }

    /**
     * Sets max_players
     * @param float $max_players The maximum amount of players allowed on the server
     * @return $this
     */
    public function setMaxPlayers($max_players)
    {
        $this->container['max_players'] = $max_players;

        return $this;
    }

    /**
     * Gets uptime_ticks
     * @return float
     */
    public function getUptimeTicks()
    {
        return $this->container['uptime_ticks'];
    }

    /**
     * Sets uptime_ticks
     * @param float $uptime_ticks The number of ticks the server has been running
     * @return $this
     */
    public function setUptimeTicks($uptime_ticks)
    {
        $this->container['uptime_ticks'] = $uptime_ticks;

        return $this;
    }

    /**
     * Gets tps
     * @return float
     */
    public function getTps()
    {
        return $this->container['tps'];
    }

    /**
     * Sets tps
     * @param float $tps The average ticks per second the server is running with. 20 is ideal.
     * @return $this
     */
    public function setTps($tps)
    {
        $this->container['tps'] = $tps;

        return $this;
    }

    /**
     * Gets has_whitelist
     * @return bool
     */
    public function getHasWhitelist()
    {
        return $this->container['has_whitelist'];
    }

    /**
     * Sets has_whitelist
     * @param bool $has_whitelist True if the server has a whitelist, false otherwise.
     * @return $this
     */
    public function setHasWhitelist($has_whitelist)
    {
        $this->container['has_whitelist'] = $has_whitelist;

        return $this;
    }

    /**
     * Gets minecraft_version
     * @return string
     */
    public function getMinecraftVersion()
    {
        return $this->container['minecraft_version'];
    }

    /**
     * Sets minecraft_version
     * @param string $minecraft_version The minecraft version running on the server.
     * @return $this
     */
    public function setMinecraftVersion($minecraft_version)
    {
        $this->container['minecraft_version'] = $minecraft_version;

        return $this;
    }

    /**
     * Gets game
     * @return \Swagger\Client\Model\ServerInfoDetail
     */
    public function getGame()
    {
        return $this->container['game'];
    }

    /**
     * Sets game
     * @param \Swagger\Client\Model\ServerInfoDetail $game
     * @return $this
     */
    public function setGame($game)
    {
        $this->container['game'] = $game;

        return $this;
    }

    /**
     * Gets api
     * @return \Swagger\Client\Model\ServerInfoDetail
     */
    public function getApi()
    {
        return $this->container['api'];
    }

    /**
     * Sets api
     * @param \Swagger\Client\Model\ServerInfoDetail $api
     * @return $this
     */
    public function setApi($api)
    {
        $this->container['api'] = $api;

        return $this;
    }

    /**
     * Gets implementation
     * @return \Swagger\Client\Model\ServerInfoDetail
     */
    public function getImplementation()
    {
        return $this->container['implementation'];
    }

    /**
     * Sets implementation
     * @param \Swagger\Client\Model\ServerInfoDetail $implementation
     * @return $this
     */
    public function setImplementation($implementation)
    {
        $this->container['implementation'] = $implementation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



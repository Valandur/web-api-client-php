<?php
/**
 * WorldFullBorder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  #/ Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  #/ Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * WorldFullBorder Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WorldFullBorder implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'WorldFull_border';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'center' => '\Swagger\Client\Model\Vector3',
        'diameter' => 'float',
        'damage_amount' => 'float',
        'damage_threshold' => 'float',
        'new_diameter' => 'float',
        'time_remaining' => 'float',
        'warning_distance' => 'float',
        'warning_time' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'center' => null,
        'diameter' => null,
        'damage_amount' => null,
        'damage_threshold' => null,
        'new_diameter' => null,
        'time_remaining' => null,
        'warning_distance' => null,
        'warning_time' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'center' => 'center',
        'diameter' => 'diameter',
        'damage_amount' => 'damageAmount',
        'damage_threshold' => 'damageThreshold',
        'new_diameter' => 'newDiameter',
        'time_remaining' => 'timeRemaining',
        'warning_distance' => 'warningDistance',
        'warning_time' => 'warningTime'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'center' => 'setCenter',
        'diameter' => 'setDiameter',
        'damage_amount' => 'setDamageAmount',
        'damage_threshold' => 'setDamageThreshold',
        'new_diameter' => 'setNewDiameter',
        'time_remaining' => 'setTimeRemaining',
        'warning_distance' => 'setWarningDistance',
        'warning_time' => 'setWarningTime'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'center' => 'getCenter',
        'diameter' => 'getDiameter',
        'damage_amount' => 'getDamageAmount',
        'damage_threshold' => 'getDamageThreshold',
        'new_diameter' => 'getNewDiameter',
        'time_remaining' => 'getTimeRemaining',
        'warning_distance' => 'getWarningDistance',
        'warning_time' => 'getWarningTime'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['center'] = isset($data['center']) ? $data['center'] : null;
        $this->container['diameter'] = isset($data['diameter']) ? $data['diameter'] : null;
        $this->container['damage_amount'] = isset($data['damage_amount']) ? $data['damage_amount'] : null;
        $this->container['damage_threshold'] = isset($data['damage_threshold']) ? $data['damage_threshold'] : null;
        $this->container['new_diameter'] = isset($data['new_diameter']) ? $data['new_diameter'] : null;
        $this->container['time_remaining'] = isset($data['time_remaining']) ? $data['time_remaining'] : null;
        $this->container['warning_distance'] = isset($data['warning_distance']) ? $data['warning_distance'] : null;
        $this->container['warning_time'] = isset($data['warning_time']) ? $data['warning_time'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets center
     * @return \Swagger\Client\Model\Vector3
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     * @param \Swagger\Client\Model\Vector3 $center
     * @return $this
     */
    public function setCenter($center)
    {
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets diameter
     * @return float
     */
    public function getDiameter()
    {
        return $this->container['diameter'];
    }

    /**
     * Sets diameter
     * @param float $diameter The diameter of the world border.
     * @return $this
     */
    public function setDiameter($diameter)
    {
        $this->container['diameter'] = $diameter;

        return $this;
    }

    /**
     * Gets damage_amount
     * @return float
     */
    public function getDamageAmount()
    {
        return $this->container['damage_amount'];
    }

    /**
     * Sets damage_amount
     * @param float $damage_amount The amount of damage done to the player when outside the world border.
     * @return $this
     */
    public function setDamageAmount($damage_amount)
    {
        $this->container['damage_amount'] = $damage_amount;

        return $this;
    }

    /**
     * Gets damage_threshold
     * @return float
     */
    public function getDamageThreshold()
    {
        return $this->container['damage_threshold'];
    }

    /**
     * Sets damage_threshold
     * @param float $damage_threshold The amount of time in seconds to wait before applying the damage.
     * @return $this
     */
    public function setDamageThreshold($damage_threshold)
    {
        $this->container['damage_threshold'] = $damage_threshold;

        return $this;
    }

    /**
     * Gets new_diameter
     * @return float
     */
    public function getNewDiameter()
    {
        return $this->container['new_diameter'];
    }

    /**
     * Sets new_diameter
     * @param float $new_diameter The new diameter the world border is going to change to.
     * @return $this
     */
    public function setNewDiameter($new_diameter)
    {
        $this->container['new_diameter'] = $new_diameter;

        return $this;
    }

    /**
     * Gets time_remaining
     * @return float
     */
    public function getTimeRemaining()
    {
        return $this->container['time_remaining'];
    }

    /**
     * Sets time_remaining
     * @param float $time_remaining The amount of time remaining before the world border reaches the new diameter.
     * @return $this
     */
    public function setTimeRemaining($time_remaining)
    {
        $this->container['time_remaining'] = $time_remaining;

        return $this;
    }

    /**
     * Gets warning_distance
     * @return float
     */
    public function getWarningDistance()
    {
        return $this->container['warning_distance'];
    }

    /**
     * Sets warning_distance
     * @param float $warning_distance The distance at which a player is warned of the world border.
     * @return $this
     */
    public function setWarningDistance($warning_distance)
    {
        $this->container['warning_distance'] = $warning_distance;

        return $this;
    }

    /**
     * Gets warning_time
     * @return float
     */
    public function getWarningTime()
    {
        return $this->container['warning_time'];
    }

    /**
     * Sets warning_time
     * @param float $warning_time The amount of time in seconds before a contracting world border reaches a player that the player is warned.
     * @return $this
     */
    public function setWarningTime($warning_time)
    {
        $this->container['warning_time'] = $warning_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



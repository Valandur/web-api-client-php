<?php
/**
 * TileEntityApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * TileEntityApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TileEntityApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return TileEntityApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation executeTileEntityMethod
     *
     * Execute tile entity methods
     *
     * @param string $world_uuid The uuid of the world the tile entity is in. (required)
     * @param string $x The x-coordinate of the tile entity. (required)
     * @param string $y The y-coordinate of the tile entity. (required)
     * @param string $z The z-coordinate of the tile entity. (required)
     * @param \Swagger\Client\Model\RawRequest $request Information about which method to execute. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExecuteTileEntityMethodResponse
     */
    public function executeTileEntityMethod($world_uuid, $x, $y, $z, $request)
    {
        list($response) = $this->executeTileEntityMethodWithHttpInfo($world_uuid, $x, $y, $z, $request);
        return $response;
    }

    /**
     * Operation executeTileEntityMethodWithHttpInfo
     *
     * Execute tile entity methods
     *
     * @param string $world_uuid The uuid of the world the tile entity is in. (required)
     * @param string $x The x-coordinate of the tile entity. (required)
     * @param string $y The y-coordinate of the tile entity. (required)
     * @param string $z The z-coordinate of the tile entity. (required)
     * @param \Swagger\Client\Model\RawRequest $request Information about which method to execute. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExecuteTileEntityMethodResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeTileEntityMethodWithHttpInfo($world_uuid, $x, $y, $z, $request)
    {
        // verify the required parameter 'world_uuid' is set
        if ($world_uuid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $world_uuid when calling executeTileEntityMethod');
        }
        // verify the required parameter 'x' is set
        if ($x === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x when calling executeTileEntityMethod');
        }
        // verify the required parameter 'y' is set
        if ($y === null) {
            throw new \InvalidArgumentException('Missing the required parameter $y when calling executeTileEntityMethod');
        }
        // verify the required parameter 'z' is set
        if ($z === null) {
            throw new \InvalidArgumentException('Missing the required parameter $z when calling executeTileEntityMethod');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling executeTileEntityMethod');
        }
        // parse inputs
        $resourcePath = "/tile-entity/{worldUuid}/{x}/{y}/{z}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($world_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "worldUuid" . "}",
                $this->apiClient->getSerializer()->toPathValue($world_uuid),
                $resourcePath
            );
        }
        // path params
        if ($x !== null) {
            $resourcePath = str_replace(
                "{" . "x" . "}",
                $this->apiClient->getSerializer()->toPathValue($x),
                $resourcePath
            );
        }
        // path params
        if ($y !== null) {
            $resourcePath = str_replace(
                "{" . "y" . "}",
                $this->apiClient->getSerializer()->toPathValue($y),
                $resourcePath
            );
        }
        // path params
        if ($z !== null) {
            $resourcePath = str_replace(
                "{" . "z" . "}",
                $this->apiClient->getSerializer()->toPathValue($z),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-webapi-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-webapi-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('key');
        if (strlen($apiKey) !== 0) {
            $queryParams['key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExecuteTileEntityMethodResponse',
                '/tile-entity/{worldUuid}/{x}/{y}/{z}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExecuteTileEntityMethodResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExecuteTileEntityMethodResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTileEntities
     *
     * Tile entities list
     *
     * @param string $world The uuid of the world to filter entities by. (optional)
     * @param string $type The TileEntityType id to filter the tile entities by. (optional)
     * @param string $limit The maximum amount of tile entities to return. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TileEntitiesResponse
     */
    public function getTileEntities($world = null, $type = null, $limit = null)
    {
        list($response) = $this->getTileEntitiesWithHttpInfo($world, $type, $limit);
        return $response;
    }

    /**
     * Operation getTileEntitiesWithHttpInfo
     *
     * Tile entities list
     *
     * @param string $world The uuid of the world to filter entities by. (optional)
     * @param string $type The TileEntityType id to filter the tile entities by. (optional)
     * @param string $limit The maximum amount of tile entities to return. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TileEntitiesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTileEntitiesWithHttpInfo($world = null, $type = null, $limit = null)
    {
        // parse inputs
        $resourcePath = "/tile-entity";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($world !== null) {
            $queryParams['world'] = $this->apiClient->getSerializer()->toQueryValue($world);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-webapi-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-webapi-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('key');
        if (strlen($apiKey) !== 0) {
            $queryParams['key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TileEntitiesResponse',
                '/tile-entity'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TileEntitiesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TileEntitiesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTileEntity
     *
     * Detailed tile entity info
     *
     * @param string $world_uuid The uuid of the world the tile entity is in. (required)
     * @param string $x The x-coordinate of the tile entity. (required)
     * @param string $y The y-coordinate of the tile entity. (required)
     * @param string $z The z-coordinate of the tile entity. (required)
     * @param string $fields An optional list of additional fields to get. (optional)
     * @param string $methods An optional list of additional methods to get. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TileEntityResponse
     */
    public function getTileEntity($world_uuid, $x, $y, $z, $fields = null, $methods = null)
    {
        list($response) = $this->getTileEntityWithHttpInfo($world_uuid, $x, $y, $z, $fields, $methods);
        return $response;
    }

    /**
     * Operation getTileEntityWithHttpInfo
     *
     * Detailed tile entity info
     *
     * @param string $world_uuid The uuid of the world the tile entity is in. (required)
     * @param string $x The x-coordinate of the tile entity. (required)
     * @param string $y The y-coordinate of the tile entity. (required)
     * @param string $z The z-coordinate of the tile entity. (required)
     * @param string $fields An optional list of additional fields to get. (optional)
     * @param string $methods An optional list of additional methods to get. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TileEntityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTileEntityWithHttpInfo($world_uuid, $x, $y, $z, $fields = null, $methods = null)
    {
        // verify the required parameter 'world_uuid' is set
        if ($world_uuid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $world_uuid when calling getTileEntity');
        }
        // verify the required parameter 'x' is set
        if ($x === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x when calling getTileEntity');
        }
        // verify the required parameter 'y' is set
        if ($y === null) {
            throw new \InvalidArgumentException('Missing the required parameter $y when calling getTileEntity');
        }
        // verify the required parameter 'z' is set
        if ($z === null) {
            throw new \InvalidArgumentException('Missing the required parameter $z when calling getTileEntity');
        }
        // parse inputs
        $resourcePath = "/tile-entity/{worldUuid}/{x}/{y}/{z}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // query params
        if ($methods !== null) {
            $queryParams['methods'] = $this->apiClient->getSerializer()->toQueryValue($methods);
        }
        // path params
        if ($world_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "worldUuid" . "}",
                $this->apiClient->getSerializer()->toPathValue($world_uuid),
                $resourcePath
            );
        }
        // path params
        if ($x !== null) {
            $resourcePath = str_replace(
                "{" . "x" . "}",
                $this->apiClient->getSerializer()->toPathValue($x),
                $resourcePath
            );
        }
        // path params
        if ($y !== null) {
            $resourcePath = str_replace(
                "{" . "y" . "}",
                $this->apiClient->getSerializer()->toPathValue($y),
                $resourcePath
            );
        }
        // path params
        if ($z !== null) {
            $resourcePath = str_replace(
                "{" . "z" . "}",
                $this->apiClient->getSerializer()->toPathValue($z),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-webapi-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-webapi-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('key');
        if (strlen($apiKey) !== 0) {
            $queryParams['key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TileEntityResponse',
                '/tile-entity/{worldUuid}/{x}/{y}/{z}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TileEntityResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TileEntityResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

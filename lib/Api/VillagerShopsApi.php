<?php
/**
 * VillagerShopsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * VillagerShopsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VillagerShopsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addShopItem
     *
     * Add Shop Item
     *
     * @param  string $id id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsStockItem
     */
    public function addShopItem($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->addShopItemWithHttpInfo($id, $body, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation addShopItemWithHttpInfo
     *
     * Add Shop Item
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsStockItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function addShopItemWithHttpInfo($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->addShopItemRequest($id, $body, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsStockItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addShopItemAsync
     *
     * Add Shop Item
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addShopItemAsync($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        return $this->addShopItemAsyncWithHttpInfo($id, $body, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addShopItemAsyncWithHttpInfo
     *
     * Add Shop Item
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addShopItemAsyncWithHttpInfo($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->addShopItemRequest($id, $body, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addShopItem'
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addShopItemRequest($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addShopItem'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addShopItem_0
     *
     * Add Shop Item
     *
     * @param  string $id id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsStockItem
     */
    public function addShopItem_0($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->addShopItem_0WithHttpInfo($id, $body, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation addShopItem_0WithHttpInfo
     *
     * Add Shop Item
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsStockItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function addShopItem_0WithHttpInfo($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->addShopItem_0Request($id, $body, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsStockItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addShopItem_0Async
     *
     * Add Shop Item
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addShopItem_0Async($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        return $this->addShopItem_0AsyncWithHttpInfo($id, $body, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addShopItem_0AsyncWithHttpInfo
     *
     * Add Shop Item
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addShopItem_0AsyncWithHttpInfo($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->addShopItem_0Request($id, $body, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addShopItem_0'
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addShopItem_0Request($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addShopItem_0'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShop
     *
     * Create Shops
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function createShop($body = null, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->createShopWithHttpInfo($body, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation createShopWithHttpInfo
     *
     * Create Shops
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShopWithHttpInfo($body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->createShopRequest($body, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShopAsync
     *
     * Create Shops
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopAsync($body = null, $details = null, $accept = null, $pretty = null)
    {
        return $this->createShopAsyncWithHttpInfo($body, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShopAsyncWithHttpInfo
     *
     * Create Shops
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopAsyncWithHttpInfo($body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->createShopRequest($body, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShop'
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createShopRequest($body = null, $details = null, $accept = null, $pretty = null)
    {

        $resourcePath = '/vshop/shop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShop_0
     *
     * Create Shops
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function createShop_0($body = null, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->createShop_0WithHttpInfo($body, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation createShop_0WithHttpInfo
     *
     * Create Shops
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShop_0WithHttpInfo($body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->createShop_0Request($body, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShop_0Async
     *
     * Create Shops
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShop_0Async($body = null, $details = null, $accept = null, $pretty = null)
    {
        return $this->createShop_0AsyncWithHttpInfo($body, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShop_0AsyncWithHttpInfo
     *
     * Create Shops
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShop_0AsyncWithHttpInfo($body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->createShop_0Request($body, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShop_0'
     *
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createShop_0Request($body = null, $details = null, $accept = null, $pretty = null)
    {

        $resourcePath = '/vshop/shop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteShop
     *
     * Delete a Shop
     *
     * @param  string $id id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function deleteShop($id, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->deleteShopWithHttpInfo($id, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation deleteShopWithHttpInfo
     *
     * Delete a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShopWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->deleteShopRequest($id, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteShopAsync
     *
     * Delete a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopAsync($id, $details = null, $accept = null, $pretty = null)
    {
        return $this->deleteShopAsyncWithHttpInfo($id, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteShopAsyncWithHttpInfo
     *
     * Delete a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopAsyncWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->deleteShopRequest($id, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteShop'
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShopRequest($id, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteShop'
            );
        }

        $resourcePath = '/vshop/shop/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteShopItem
     *
     * Removes a Shop Item
     *
     * @param  string $id id (required)
     * @param  int $item item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function deleteShopItem($id, $item, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->deleteShopItemWithHttpInfo($id, $item, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation deleteShopItemWithHttpInfo
     *
     * Removes a Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShopItemWithHttpInfo($id, $item, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->deleteShopItemRequest($id, $item, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteShopItemAsync
     *
     * Removes a Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopItemAsync($id, $item, $details = null, $accept = null, $pretty = null)
    {
        return $this->deleteShopItemAsyncWithHttpInfo($id, $item, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteShopItemAsyncWithHttpInfo
     *
     * Removes a Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopItemAsyncWithHttpInfo($id, $item, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->deleteShopItemRequest($id, $item, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteShopItem'
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShopItemRequest($id, $item, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteShopItem'
            );
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling deleteShopItem'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteShopItem_0
     *
     * Removes a Shop Item
     *
     * @param  string $id id (required)
     * @param  int $item item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function deleteShopItem_0($id, $item, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->deleteShopItem_0WithHttpInfo($id, $item, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation deleteShopItem_0WithHttpInfo
     *
     * Removes a Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShopItem_0WithHttpInfo($id, $item, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->deleteShopItem_0Request($id, $item, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteShopItem_0Async
     *
     * Removes a Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopItem_0Async($id, $item, $details = null, $accept = null, $pretty = null)
    {
        return $this->deleteShopItem_0AsyncWithHttpInfo($id, $item, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteShopItem_0AsyncWithHttpInfo
     *
     * Removes a Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopItem_0AsyncWithHttpInfo($id, $item, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->deleteShopItem_0Request($id, $item, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteShopItem_0'
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShopItem_0Request($id, $item, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteShopItem_0'
            );
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling deleteShopItem_0'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteShop_0
     *
     * Delete a Shop
     *
     * @param  string $id id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function deleteShop_0($id, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->deleteShop_0WithHttpInfo($id, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation deleteShop_0WithHttpInfo
     *
     * Delete a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShop_0WithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->deleteShop_0Request($id, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteShop_0Async
     *
     * Delete a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShop_0Async($id, $details = null, $accept = null, $pretty = null)
    {
        return $this->deleteShop_0AsyncWithHttpInfo($id, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteShop_0AsyncWithHttpInfo
     *
     * Delete a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShop_0AsyncWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->deleteShop_0Request($id, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteShop_0'
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShop_0Request($id, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteShop_0'
            );
        }

        $resourcePath = '/vshop/shop/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShop
     *
     * Get a Shop
     *
     * @param  string $id id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function getShop($id, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->getShopWithHttpInfo($id, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation getShopWithHttpInfo
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShopWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->getShopRequest($id, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShopAsync
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopAsync($id, $details = null, $accept = null, $pretty = null)
    {
        return $this->getShopAsyncWithHttpInfo($id, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShopAsyncWithHttpInfo
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopAsyncWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->getShopRequest($id, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShop'
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShopRequest($id, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getShop'
            );
        }

        $resourcePath = '/vshop/shop/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShopItem
     *
     * Get a Shop
     *
     * @param  string $id id (required)
     * @param  int $item item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsStockItem
     */
    public function getShopItem($id, $item, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->getShopItemWithHttpInfo($id, $item, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation getShopItemWithHttpInfo
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsStockItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShopItemWithHttpInfo($id, $item, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->getShopItemRequest($id, $item, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsStockItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShopItemAsync
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopItemAsync($id, $item, $details = null, $accept = null, $pretty = null)
    {
        return $this->getShopItemAsyncWithHttpInfo($id, $item, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShopItemAsyncWithHttpInfo
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopItemAsyncWithHttpInfo($id, $item, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->getShopItemRequest($id, $item, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShopItem'
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShopItemRequest($id, $item, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getShopItem'
            );
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling getShopItem'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShopItem_0
     *
     * Get a Shop
     *
     * @param  string $id id (required)
     * @param  int $item item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsStockItem
     */
    public function getShopItem_0($id, $item, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->getShopItem_0WithHttpInfo($id, $item, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation getShopItem_0WithHttpInfo
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsStockItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShopItem_0WithHttpInfo($id, $item, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->getShopItem_0Request($id, $item, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsStockItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShopItem_0Async
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopItem_0Async($id, $item, $details = null, $accept = null, $pretty = null)
    {
        return $this->getShopItem_0AsyncWithHttpInfo($id, $item, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShopItem_0AsyncWithHttpInfo
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopItem_0AsyncWithHttpInfo($id, $item, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->getShopItem_0Request($id, $item, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShopItem_0'
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShopItem_0Request($id, $item, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getShopItem_0'
            );
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling getShopItem_0'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShop_0
     *
     * Get a Shop
     *
     * @param  string $id id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function getShop_0($id, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->getShop_0WithHttpInfo($id, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation getShop_0WithHttpInfo
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShop_0WithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->getShop_0Request($id, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShop_0Async
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShop_0Async($id, $details = null, $accept = null, $pretty = null)
    {
        return $this->getShop_0AsyncWithHttpInfo($id, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShop_0AsyncWithHttpInfo
     *
     * Get a Shop
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShop_0AsyncWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->getShop_0Request($id, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShop_0'
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShop_0Request($id, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getShop_0'
            );
        }

        $resourcePath = '/vshop/shop/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShopItems
     *
     * List Shop Items
     *
     * @param  string $id id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsStockItem[]
     */
    public function listShopItems($id, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->listShopItemsWithHttpInfo($id, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation listShopItemsWithHttpInfo
     *
     * List Shop Items
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsStockItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listShopItemsWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem[]';
        $request = $this->listShopItemsRequest($id, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsStockItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShopItemsAsync
     *
     * List Shop Items
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShopItemsAsync($id, $details = null, $accept = null, $pretty = null)
    {
        return $this->listShopItemsAsyncWithHttpInfo($id, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShopItemsAsyncWithHttpInfo
     *
     * List Shop Items
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShopItemsAsyncWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem[]';
        $request = $this->listShopItemsRequest($id, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShopItems'
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShopItemsRequest($id, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listShopItems'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShopItems_0
     *
     * List Shop Items
     *
     * @param  string $id id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsStockItem[]
     */
    public function listShopItems_0($id, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->listShopItems_0WithHttpInfo($id, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation listShopItems_0WithHttpInfo
     *
     * List Shop Items
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsStockItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listShopItems_0WithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem[]';
        $request = $this->listShopItems_0Request($id, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsStockItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShopItems_0Async
     *
     * List Shop Items
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShopItems_0Async($id, $details = null, $accept = null, $pretty = null)
    {
        return $this->listShopItems_0AsyncWithHttpInfo($id, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShopItems_0AsyncWithHttpInfo
     *
     * List Shop Items
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShopItems_0AsyncWithHttpInfo($id, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem[]';
        $request = $this->listShopItems_0Request($id, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShopItems_0'
     *
     * @param  string $id (required)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShopItems_0Request($id, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listShopItems_0'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShops
     *
     * List Shops
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop[]
     */
    public function listShops($details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->listShopsWithHttpInfo($details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation listShopsWithHttpInfo
     *
     * List Shops
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listShopsWithHttpInfo($details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop[]';
        $request = $this->listShopsRequest($details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShopsAsync
     *
     * List Shops
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShopsAsync($details = null, $accept = null, $pretty = null)
    {
        return $this->listShopsAsyncWithHttpInfo($details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShopsAsyncWithHttpInfo
     *
     * List Shops
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShopsAsyncWithHttpInfo($details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop[]';
        $request = $this->listShopsRequest($details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShops'
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShopsRequest($details = null, $accept = null, $pretty = null)
    {

        $resourcePath = '/vshop/shop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShops_0
     *
     * List Shops
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop[]
     */
    public function listShops_0($details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->listShops_0WithHttpInfo($details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation listShops_0WithHttpInfo
     *
     * List Shops
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listShops_0WithHttpInfo($details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop[]';
        $request = $this->listShops_0Request($details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShops_0Async
     *
     * List Shops
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShops_0Async($details = null, $accept = null, $pretty = null)
    {
        return $this->listShops_0AsyncWithHttpInfo($details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShops_0AsyncWithHttpInfo
     *
     * List Shops
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShops_0AsyncWithHttpInfo($details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop[]';
        $request = $this->listShops_0Request($details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShops_0'
     *
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShops_0Request($details = null, $accept = null, $pretty = null)
    {

        $resourcePath = '/vshop/shop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShop
     *
     * Change Shop
     *
     * @param  string $id id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function updateShop($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->updateShopWithHttpInfo($id, $body, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation updateShopWithHttpInfo
     *
     * Change Shop
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShopWithHttpInfo($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->updateShopRequest($id, $body, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShopAsync
     *
     * Change Shop
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopAsync($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        return $this->updateShopAsyncWithHttpInfo($id, $body, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShopAsyncWithHttpInfo
     *
     * Change Shop
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopAsyncWithHttpInfo($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->updateShopRequest($id, $body, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShop'
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShopRequest($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateShop'
            );
        }

        $resourcePath = '/vshop/shop/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShopItem
     *
     * Change Shop Item
     *
     * @param  string $id id (required)
     * @param  int $item item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsStockItem
     */
    public function updateShopItem($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->updateShopItemWithHttpInfo($id, $item, $body, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation updateShopItemWithHttpInfo
     *
     * Change Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsStockItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShopItemWithHttpInfo($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->updateShopItemRequest($id, $item, $body, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsStockItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShopItemAsync
     *
     * Change Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopItemAsync($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        return $this->updateShopItemAsyncWithHttpInfo($id, $item, $body, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShopItemAsyncWithHttpInfo
     *
     * Change Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopItemAsyncWithHttpInfo($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->updateShopItemRequest($id, $item, $body, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShopItem'
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShopItemRequest($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateShopItem'
            );
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling updateShopItem'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShopItem_0
     *
     * Change Shop Item
     *
     * @param  string $id id (required)
     * @param  int $item item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsStockItem
     */
    public function updateShopItem_0($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->updateShopItem_0WithHttpInfo($id, $item, $body, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation updateShopItem_0WithHttpInfo
     *
     * Change Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsStockItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShopItem_0WithHttpInfo($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->updateShopItem_0Request($id, $item, $body, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsStockItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShopItem_0Async
     *
     * Change Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopItem_0Async($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        return $this->updateShopItem_0AsyncWithHttpInfo($id, $item, $body, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShopItem_0AsyncWithHttpInfo
     *
     * Change Shop Item
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopItem_0AsyncWithHttpInfo($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsStockItem';
        $request = $this->updateShopItem_0Request($id, $item, $body, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShopItem_0'
     *
     * @param  string $id (required)
     * @param  int $item (required)
     * @param  \Swagger\Client\Model\VillagerShopsStockItem $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShopItem_0Request($id, $item, $body = null, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateShopItem_0'
            );
        }
        // verify the required parameter 'item' is set
        if ($item === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item when calling updateShopItem_0'
            );
        }

        $resourcePath = '/vshop/shop/{id}/item/{item}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item !== null) {
            $resourcePath = str_replace(
                '{' . 'item' . '}',
                ObjectSerializer::toPathValue($item),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShop_0
     *
     * Change Shop
     *
     * @param  string $id id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VillagerShopsShop
     */
    public function updateShop_0($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        list($response) = $this->updateShop_0WithHttpInfo($id, $body, $details, $accept, $pretty);
        return $response;
    }

    /**
     * Operation updateShop_0WithHttpInfo
     *
     * Change Shop
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VillagerShopsShop, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShop_0WithHttpInfo($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->updateShop_0Request($id, $body, $details, $accept, $pretty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VillagerShopsShop',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShop_0Async
     *
     * Change Shop
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShop_0Async($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        return $this->updateShop_0AsyncWithHttpInfo($id, $body, $details, $accept, $pretty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShop_0AsyncWithHttpInfo
     *
     * Change Shop
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShop_0AsyncWithHttpInfo($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        $returnType = '\Swagger\Client\Model\VillagerShopsShop';
        $request = $this->updateShop_0Request($id, $body, $details, $accept, $pretty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShop_0'
     *
     * @param  string $id (required)
     * @param  \Swagger\Client\Model\VillagerShopsShop $body (optional)
     * @param  bool $details Add to include additional details, omit or false otherwise (optional)
     * @param  string $accept Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)
     * @param  bool $pretty Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShop_0Request($id, $body = null, $details = null, $accept = null, $pretty = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateShop_0'
            );
        }

        $resourcePath = '/vshop/shop/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($details !== null) {
            $queryParams['details'] = ObjectSerializer::toQueryValue($details);
        }
        // query params
        if ($accept !== null) {
            $queryParams['accept'] = ObjectSerializer::toQueryValue($accept);
        }
        // query params
        if ($pretty !== null) {
            $queryParams['pretty'] = ObjectSerializer::toQueryValue($pretty);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-WebAPI-Key');
        if ($apiKey !== null) {
            $headers['X-WebAPI-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('key');
        if ($apiKey !== null) {
            $queryParams['key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
